Matthew Anderson
31 May 2012
Update:  The code can now take an arbitrary number of stencils (specified by parameter nx0) 
as long as the parameter nx0 is >= 3. 
This simplifies tests on multiple localities and checks serialization.  

The syntax for testing on several nodes explicitly has changed somewhat:

in one console, type:
./dataflow -p iddataflow -0 -l2

in another console, type:
./dataflow -p iddataflow -1 -l2

2 Aug 2011
This simple example illustrates a dataflow component called unigrid_mesh which creates 
two rows of three stencils set up
to immitate a simple unigrid mesh finite difference or finite element simulation.  Each stencil
has three inputs and three output; remote stencil access has been serialized so that only the
boundary values of the stencils are actually sent as parcels (just like you would do in a typically
MPI simulation).     

The initial data is random and the right hand side computation is a simple copy in order to make
the example simpler.

To pass a parameter file (iddataflow), use the -p option, i.e.

dataflow -p iddataflow

To run multiple threads on a single locality, use the -t option, i.e.

dataflow -t 2 

To run on multiple localities, it is best to use the hpx_pbs script.  However, you can also start
the code by opening several consoles and manually inputting the commands.  For example, to run on
two localities, one thread each, you would open two consoles:

in one console:
dataflow -p iddataflow -t2 -Ihpx.agas.address=127.0.0.1 -Ihpx.agas.port=7913 -l2 -r -x127.0.0.1:7913

in the other console:
dataflow -p iddataflow -t2 -Ihpx.agas.address=127.0.0.1 -Ihpx.agas.port=7913 -l2 -x127.0.0.1:7912 -w
