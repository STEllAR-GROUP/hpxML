[/==============================================================================
    Copyright (C) 2007-2012 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Preface]

[heading Quickstart Introduction]

Current advances in high performance computing continue to suffer from the
issues plaguing parallel computation. These issues include, but are not
limited to, ease of programming, inability to handle dynamically changing
workloads, scalability and efficient utilization of system resources.
Emerging technological trends such as multi-core processors further
highlight limitations of existing parallel computation models. To mitigate
the aforementioned problems, it is necessary to rethink the approach to
parallelization models. ParalleX contains mechanisms such as
multi-threading, parcels, global name space support, percolation and local
control objects (LCO). By design, ParalleX overcomes limitations of current
models of parallelism by alleviating contention, latency, overhead and
starvation. With ParalleX, it is further possible to increase performance
by at least an order of magnitude on challenging parallel algorithms, e.g.,
dynamic directed graph algorithms. Finally, an additional benefit of
ParalleX may manifest itself through a reduction in power consumption.

ParalleX is a new parallel execution model that offers an alternative to
the conventional computation models, such as message passing. ParalleX
distinguishes itself by:

* Split-phase transaction model
* Message-driven
* Distributed shared memory (not cache coherent)
* Multi-threaded
* Futures Synchronization
* Local Control Objects (LCO)
* Synchronization for anonymous producer-consumer scenarios
* Percolation (pre-staging of task data)

The ParalleX model is intrinsically latency hiding, delivering an abundance
of parallelism in their diversity of form and size within a hierarchical
distributed shared named space environment. The goal of this innovative
strategy is to enable future systems delivering very high efficiency,
increased scalability and ease of programming (through custom developed
programming language, Agincourt). ParalleX can contribute to the
significant improvements in the design of all levels of computing systems
and their usage from application algorithms and their programming languages
to system architecture and hardware design together with their supporting
compilers and operating system software.

High Performance ParalleX (HPX) is the first freely available open-source
runtime system implementation of the ParalleX execution model. The HPX runtime
software package is a modular, feature-complete, and performance oriented
representation of the ParalleX execution model targeted at conventional
parallel computing architectures such as SMP nodes and commodity clusters.
We provide HPX to the open community for experimentation and application
to achieve high efficiency and scalability for dynamic adaptive and irregular
computational problems. HPX is a library of C++ functions that supports a set
of critical mechanisms for dynamic adaptive resource management and lightweight
task scheduling within the context of a global address space. It is solidly
based on many years of experience in writing highly parallel applications for
HPC systems.

The two-decade success of the communicating sequential processes (CSP)
execution model and its message passing interface (MPI) programming model has
been seriously eroded by challenges of power, processor core complexity,
multi-core sockets, and heterogeneous structures of GPUs. Both efficiency and
scalability for some current (strong scaled) applications and future Exascale
applications demand new techniques to expose new sources of algorithm
parallelism and exploit unused resources through adaptive use of runtime
information.

The ParalleX execution model replaces CSP to provide a new computing paradigm
embodying the governing principles for organizing and conducting highly
efficient scalable computations greatly exceeding the capabilities of today's
problems. HPX is the first practical, reliable, and performance-oriented
runtime system incorporating the principal concepts of ParalleX model publicly
provided in open source release form.

HPX is designed by the CCT __stellar__ Group (STE||AR: Systems Technology, Emergent
Parallelism, and Algorithm Research) to enable developers to exploit the full
processing power of many-core systems with an unprecedented degree of parallelism.
__stellar__ is a research group focusing on system software solutions and scientific
application development for hybrid and many-core hardware architectures.

[heading How to use this manual]

Each major section is roughly divided into 3 parts:

# Tutorials: A step by step guide with heavily annotated code. These
  are meant to get the user acquainted with the library as quickly as
  possible. The objective is to build the confidence of the user in
  using the library through abundant examples and detailed
  instructions. Examples speak volumes and we have volumes of
  examples!

# Abstracts: A high level summary of key topics. The objective is to
  give the user a high level view of the library, the key concepts,
  background and theories.

# Reference: Detailed formal technical reference. We start with a quick
  reference -- an easy to use table that maps into the reference proper.
  The reference proper starts with C++ concepts followed by
  models of the concepts.

Some icons are used to mark certain topics indicative of their relevance.
These icons precede some text to indicate:

[table Icons

    [[Icon]             [Name]          [Meaning]]

    [[__note__]         [Note]          [Generally useful information (an aside that
                                        doesn't fit in the flow of the text)]]

    [[__tip__]          [Tip]           [Suggestion on how to do something
                                        (especially something that is not obvious)]]

    [[__important__]    [Important]     [Important note on something to take
                                        particular notice of]]

    [[__caution__]      [Caution]       [Take special care with this - it may
                                        not be what you expect and may cause bad
                                        results]]

    [[__danger__]       [Danger]        [This is likely to cause serious
                                        trouble if ignored]]
]

This documentation is automatically generated by Boost QuickBook
documentation tool. QuickBook can be found in the __boost_tools__.

[heading Support]

Please direct all questions to HPX's mailing list. You can send mail
to the __stellar_list__. Another option is to log into the our IRC channel
which can be found at __stellar_irc__

[endsect] [/ Preface]
