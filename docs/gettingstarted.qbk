[/==============================================================================
    Copyright (C) 2007-2012 Hartmut Kaiser
    Copyright (C) 2011 Bryce Lelbach

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/////////////////////////////////////////////////////////////////////////////]
[section:getting_started Getting Started]

[heading Welcome]

Welcome to the HPX runtime system libraries! By the time you've completed this
tutorial, you'll be at least somewhat comfortable with the contents of a HPX
distribution and how to go about using it.

[heading What's Here]

This document is designed to be an extremely gentle introduction, so we
included a fair amount of material that may already be very familiar to you.
To keep things simple, we also left out some information intermediate and
advanced users will probably want. At the end of this document, we'll refer
you on to resources that can help you pursue these topics further.

[/Proofread by:]
[/Adrian Serio 3-13-12]
[/Phillip LeBlanc 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:unix_installation How to Install HPX on Unix Variants]

[heading Prerequisites]

In the simplest case, HPX will depend on one prerequisite library: __boost__.
However, depending on the options you chose while building and installing HPX
you will find that HPX may depend on several other prerequisites such as those
listed below. So, before you read further, please make sure you have a recent
version version of __boost__ installed on your target machine. HPX currently
requires at least Boost V1.47 to work properly. It may build and run with
older versions, but we do not test HPX with those versions so please be
warned. Installing the Boost libraries is described in detail in Boost's
own __boost_getting_started__ document. It is
often possible to download the Boost libraries using the package manager of
your distribution, please refer to the corresponding documentation.

[table Prerequisites for using HPX on Linux systems
    [[Name                       ][Recommended Version][Min/Max Version ]]

    [[[*Compilers]]]
    [[gcc                        ][4.4.5-6            ][4.4.*           ]]

    [[[*Build System]]]

    [[__cmake__                  ][2.8.4              ][2.8.*           ]]
    [[gmake                      ][3.81               ][3.80 - 3.82     ]]

    [[[*Required Libraries]]]

    [[__boost__                  ][1.48               ][1.47.0 - SVN    ]]
    [[eglibc (Debian, Ubuntu)    ][2.11.*             ][2.7.* - 2.13.*  ]]
    [[glibc (Redhat)             ][2.11.*             ][2.7.* - 2.13.*  ]]
    [[libstdc++                  ][4.4.5-6            ][4.4.*           ]]

    [[[*Optional Libraries]]]

    [[rnpl (AMR examples only)   ][N/A                ][N/A             ]]
    [[jemalloc (malloc)          ][2.1.2              ][2.1.0 - GIT     ]]
    [[google-perftools           ][1.7.1              ][1.7.1 - SVN     ]]
    [[libunwind                  ][0.99               ][0.97 - GIT      ]]
]

[heading The HPX Distribution]

[fixme Describe the directory layout of the HPX distribution here]

[heading Installation]

* Download the latest Subversion revision of HPX (or a stable tag):

[pre
    $ svn co https://svn.cct.lsu.edu/repos/projects/parallex/trunk/hpx hpx
]

* Create a build directory. HPX requires an out-of-tree build. This means you
  will be unable to run CMake in the HPX source tree.

[pre
    $ cd hpx
    $ mkdir my_hpx_build
    $ cd my_hpx_build
]

* Invoke CMake from your build directory, pointing the CMake driver to the root
  of your HPX source tree.

[pre
    $ cmake \[CMake variable definitions\] /path/to/source/tree
]

for instance:

[pre
    $ cmake -DBOOST_ROOT=~/packages/boost -DCMAKE_INSTALL_PREFIX=~/packages/hpx /path/to/source/tree
]

* Invoke GNU make. If you are on a box with multiple cores (very likely),
  add the -jN flag to your make invocation, where N is the number of nodes
  on your machine plus one.

[pre
    $ gmake -j49
]

* To complete the build and install HPX:

[pre
    $ gmake install
]

[heading Build a Simple Program Using HPX]

After you are done with the installation you should be able to build the
following program. It prints 'Hello HPX World!' on the locality you run it on.

[import ../examples/quickstart/simplest_hello_world.cpp]

[/ this is how it should look like in the future, for now we import some code
   from the simplest_hello_world example:

    #include <hpx/hpx_init.hpp>

    int hpx_main()
    {
        // Say Hello to the World!
        hpx::cout << "Hello HPX World!" << hpx::endl;

        // Initiate shutdown of the runtime system
        return hpx::finalize();
    }

    int main(int argc, char* argv[])
    {
        // Initialize and run HPX.
        return hpx::init("Hello HPX World Example", argc, argv);
    }
]
[simplest_hello_world_getting_started]

Copy the text of this program into a file called example.cpp.

Now, in the directory where you saved example.cpp, issue the following command
(where $HPX_LOCATION is with the CMAKE_INSTALL_PREFIX you used while building
HPX):

[pre
    $ export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HPX_LOCATION/lib/pkgconfig
    $ c++ \`pkg-config --cflags --libs hpx_application\` -o example example.cpp
]

To test the result, type:

[pre
    $ ./example
]

which should print `Hello HPX World!` and exit.

[heading Using HPX Applications with PBS]

Most HPX applications are executed on parallel computers.  These platforms
typically provide integrated job management services that facilitate the
allocation of computing resources for each parallel program. HPX includes out of
the box support for one of the most common job management systems, PBS
([@http://www.pbsworks.com Portable Batch System]).

All PBS jobs require a script to specify the resource requirements and other
parameters associated with a parallel job. The PBS script is basically a shell
script with PBS directives placed within comment section at the beginning of the
file. The remaining (not commented-out) portion of the file executes just like
any other regular shell script. While the description of all available PBS
options is outside the scope of this tutorial (the interested reader may refer
to in-depth [@http://www.pbsworks.com/SupportDocuments.aspx documentation] for
more information), below is a minimal example to illustrate the approach. As a
test application we will use the multithreaded `hello_world` program, explained
in the section __hello_world_example__.

[teletype]
``
    #!/bin/bash
    #
    #PBS -l nodes=2:ppn=4

    APP_PATH=~/packages/hpx/bin/hello_world
    APP_OPTIONS=

    pbsdsh -u $APP_PATH --hpx:nodes=`cat $PBS_NODEFILE` $APP_OPTIONS
``

The `#PBS -l` directive will cause two compute nodes to be allocated for the
application, as specified in option `nodes`. Each of the nodes will dedicate
four cores to the program (option `ppn`, short for "processors per node"; for
the purpose of execution resource allocation PBS does not distinguish between
processors and cores). Note that requesting more cores per node than physically
available is pointless and may prevent PBS from accepting the script.

`APP_PATH` and `APP_OPTIONS` are shell variables that respectively specify the
correct path to the executable (`hello_world` in this case) and command line
options.  Since the `hello_world` application doesn't need any command line
options, `APP_OPTIONS` has been left empty. Unlike in other execution
environments, there is no need to use the 
[link hpx.tutorial.getting_started.commandline --hpx:threads] option to 
indicate the required number of OS threads per node; HPX library will 
derive this parameter automatically from PBS.

Finally, `pbsdsh` is a PBS command that starts a distributed job using allocated
execution resources. It is recommended to leave this line as shown and modify
only the PBS options and shell variables as needed for a specific application.

All that remains now is submitting the job to the queuing system. Assuming that
the contents of the PBS script were saved in file `pbs_hello_world.sh` in the
current directory, this is accomplished by typing:

    $ qsub ./pbs_hello_world_pbs.sh

If the job is accepted, qsub will print out the assigned job ID, which may look like:

    $ 42.supercomputer.some.university.edu

To check the status of your job, issue:

   $ qstat 42.supercomputer.some.university.edu

and look for a single-letter job status symbol. The common cases include:

* *Q* signifies that the job is queued and awaiting its turn to be executed,
* *R* indicates that the job is currently running, and
* *C* means that the job has completed after having run.

The example `qstat` output showing job waiting for the execution resources to
become available is shown below:

    Job id                    Name             User            Time Use S Queue
    ------------------------- ---------------- --------------- -------- - -----
    42.supercomputer          ...ello_world.sh joe_user               0 Q batch    

After the job completes, PBS will place two files, `pbs_hello_world.sh.o42` and
`pbs_hello_world.sh.e42` in the directory from where the job was submitted. The
first contains the standard output and the second error output collected from
all the nodes on which the application executed. In our example, the error
output file should be empty and standard output file contains something similar
to:

    hello world from OS-thread 3 on locality 0
    hello world from OS-thread 2 on locality 0
    hello world from OS-thread 1 on locality 1
    hello world from OS-thread 0 on locality 0
    hello world from OS-thread 3 on locality 1
    hello world from OS-thread 2 on locality 1
    hello world from OS-thread 1 on locality 0
    hello world from OS-thread 0 on locality 1

Congratulations! You have just run your first distributed HPX application!

[endsect] [/ How to Install HPX on Unix Variants]

[/Proofread by:]
[/Adrian Serio 3-13-12]
[/Phillip LeBlanc 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:windows_installation How to Install HPX on Windows]

[heading Prerequisites]

[table Prerequisites for using HPX on Windows systems
    [[Name                       ][Recommended Version][Min/Max Version ]]

    [[[*Compilers]]]

    [[Visual C++                 ][2010               ][2010, VS11 (beta)]]

    [[[*Build System]]]

    [[__cmake__                  ][2.8.4              ][2.8.*           ]]

    [[[*Required Libraries]]]
    [[__boost__                  ][1.48               ][1.43.0 - SVN    ]]
]

[fixme TBD]

[heading The HPX Distribution]

[fixme Describe the directory layout of the HPX distribution here]

[heading Installation]

* Download the latest version of one of the archives available on the __stellar__
  website ([@http://stellar.cct.lsu.edu/downloads/ here]). Unpack the archive
  into a forlder you choose.
* Create a build folder. HPX requires an out-of-tree-build. This means that you
  will be unable to run CMake in the HPX source folder.
* Open up the CMake GUI. In the input box labelled "Where is the source code:",
  enter the full path to the source folder. In the input box labelled
  "Where to build the binaries:", enter the full path to the build folder you
  created before.
* Add CMake variable definitions (if any) by clicking the "Add Entry" button.
  The only required variable you need to define is `BOOST_ROOT`. This variable
  needs to be set to point to point to the root folder of your Boost
  installation. It is recommended to set the variable `CMAKE_INSTALL_PREFIX` as
  well. This allows to control where the built HPX libraries will be installed.
* Press the "Configure" button. A window will pop up asking you which compilers
  to use. Select the Visual Studio 10 (64Bit) compilers (they are usually
  the default if available).
* Press "Configure" again. Repeat this step until the "Generate" button becomes
  clickable (and until no variable definitions are marked red anymore).
* Press "Generate".
* Open up the build folder, and double-click hpx.sln.
* Build the INSTALL target.

[endsect] [/ How to Install HPX on Windows]

[/Proofread by:]
[/Adrian Serio 3-13-12]
[/Phillip LeBlanc 3-13-12]

[/////////////////////////////////////////////////////////////////////////////]
[section:commandline HPX Command Line Options]

The predefined command line options of any application using `hpx::init` are
described in the [link hpx.tutorial.getting_started.commandline.commandline table below].

[table:commandline Default HPX Command Line Options
    [[Option]                   [Description]]
    [[[*HPX options (allowed on command line only)]]]
    [[`--hpx:help`, `--help` or `-h`]       [print out program usage]]
    [[`--hpx:version`, `--version` or `-v`] [print out HPX version and copyright information]]
    [[`--hpx:options-file arg`]             [specify a file containing command line options
                                             (alternatively: @filepath)]]

    [[[*HPX options (additionally allowed in an options file)]]]
    [[`--hpx:worker`]           [run this instance in worker mode]]
    [[`--hpx:console`]          [run this instance in console mode]]
    [[`--hpx:connect`]          [run this instance in worker mode, but connecting
                                 late]]
    [[`--hpx:run-agas-server`]  [run AGAS server as part of this runtime instance]]
    [[`--hpx:run-hpx-main`]     [run the hpx_main function, regardless of locality
                                 mode]]
    [[`--hpx:hpx arg`]          [the IP address the HPX parcelport is listening
                                 on, expected format: 'address:port' (default:
                                 127.0.0.1:7910)]]
    [[`--hpx:agas arg`]         [the IP address the AGAS server is running on,
                                 expected format: 'address:port' (default:
                                 127.0.0.1:7910)]]
    [[`--hpx:run-agas-server-only`][run only the AGAS server]]
    [[`--hpx:nodefile arg`]     [the file name of a node file to use (list of nodes, one
                                 node name per line and core)]]
    [[`--hpx:nodes arg`]        [the (space separated) list of the nodes to use (usually
                                 this is extracted from a node file)]]
    [[`--hpx:ifsuffix arg`]     [suffix to append to host names in order to resolve them
                                 to the proper network interconnect]]
    [[`--hpx:ifprefix arg`]     [prefix to prepend to host names in order to resolve them
                                 to the proper network interconnect]]
    [[`--hpx:iftransform arg`]  [sed-style search and replace (s/search/replace/) used to
                                 transform host names to the proper network interconnect]]
    [[`--hpx:localities arg`]   [the number of localities to wait for at
                                 application startup (default: 1)]]
    [[`--hpx:node arg`]         [number of the node this locality is run on
                                 (must be unique)]]
    [[`--hpx:pu-offset`]        [the first processing unit this instance of HPX should be
                                 run on (default: 0)]]
    [[`--hpx:pu-step`]          [the step between used processing unit numbers for this
                                 instance of HPX (default: 1)]]
    [[`--hpx:threads arg`]      [the number of operating system threads to spawn
                                 for this HPX locality (default: 1)]]
    [[`--hpx:queuing arg`]      [the queue scheduling policy to use, options are
                                 'local/l', 'priority_local/pr', 'abp/a', 'priority_abp',
                                 'hierarchy/h', and 'periodic/pe' (default: priority_local/p)]]
    [[`--hpx:hierarchy-arity`]  [the arity of the of the thread queue tree, valid for
                                 --queuing=hierarchy only (default: 2)]]
    [[`--hpx:high-priority-threads arg`] [the number of operating system threads
                                 maintaining a high priority queue (default:
                                 number of OS threads), valid for
                                 --queueing=priority_local only]]
    [[`--hpx:numa-sensitive`]   [makes the priority_local scheduler NUMA sensitive, valid for
                                 --queuing=priority_local only]]

    [[[*HPX configuration options]]]
    [[`--hpx:app-config arg`]   [load the specified application configuration
                                 (ini) file]]
    [[`--hpx:config arg`]       [load the specified hpx configuration (ini) file]]
    [[`--hpx:ini arg`]          [add a configuration definition to the default
                                 runtime configuration]]
    [[`--hpx:exit`]             [exit after configuring the runtime]]

    [[[*HPX debugging options]]]
    [[`--hpx:list-symbolic-names`][list all registered symbolic names after startup]]
    [[`--hpx:list-component-types`][list all dynamic component types after startup]]
    [[`--hpx:dump-config-initial`][print the initial runtime configuration]]
    [[`--hpx:dump-config`]      [print the final runtime configuration]]
    [[`--hpx:debug-hpx-log`]    [enable all messages on the HPX log channel and send all
                                 HPX logs to the target destination]]
    [[`--hpx:debug-agas-log`]   [enable all messages on the AGAS log channel and send all
                                 AGAS logs to the target destination]]
    [[`--hpx:debug-clp`]        [debug command line processing]]

    [[[*HPX options related to performance counters]]]
    [[`--hpx:print-counter`]    [print the specified performance counter either repeatedly or
                                 before shutting down the system (see option --print-counter-interval)]]
    [[`--hpx:print-counter-interval`][print the performance counter(s) specified with --print-counter
                                 repeatedly after the time interval (specified in milliseconds)
                                 (default: 0, which means print once at shutdown)]]
    [[`--hpx:print-counter-destination`][print the performance counter(s) specified with --print-counter
                                 to the given file (default: console)]]
    [[`--hpx:list-counters`]    [list the names of all registered performance counters]]
    [[`--hpx:list-counter-infos`][list the description of all registered performance counters]]
]

[endsect] [/ Command Line Handling]

[endsect] [/ Getting Started]

[/Proofread by:]
[/Adrian Serio 3-13-12]
