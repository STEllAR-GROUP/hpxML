[/==============================================================================
    Copyright (C) 2007-2014 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:parallel High Level Parallel Facilities]

In preparation for the upcoming C++ Standards we currently see several proposals
targeting different facilities supporting parallel programming. __hpx__
implements (and extends) some of those proposals. This is well aligned with
our strategy to align the APIs exposed from __hpx__ with current and future
C++ Standards.

At this point, __hpx__ implements several of the C++ Standardization working papers,
most notably __cpp11_n4104__ (Working Draft, Technical Specification for C++
Extensions for Parallelism) and __cpp11_n4088__ (Task Blocks).


[section:parallel_algorithms Using Parallel Algorithms]

[def __sequential_execution_policy__ [classref hpx::parallel::v1::sequential_execution_policy `sequential_execution_policy`]]
[def __sequential_task_execution_policy__ [classref hpx::parallel::v1::sequential_task_execution_policy `sequential_task_execution_policy`]]
[def __parallel_execution_policy__ [classref hpx::parallel::v1::parallel_execution_policy `parallel_execution_policy`]]
[def __parallel_vector_execution_policy__ [classref hpx::parallel::v1::parallel_vector_execution_policy `parallel_vector_execution_policy`]]
[def __parallel_task_execution_policy__ [classref hpx::parallel::v1::parallel_task_execution_policy `parallel_task_execution_policy`]]
[def __execution_policy__ [classref hpx::parallel::v1::execution_policy `execution_policy`]]

[def __exception_list__ [classref hpx::exception_list `exception_list`]]

[def __par_for_each__ [funcref hpx::parallel::v1::for_each `for_each`]]

A parallel algorithm is a function template described by this document
which is declared in the (inline) namespace `hpx::parallel::v1`.

[note For compilers which do not support inline namespaces, all of the
      `namespace v1` is imported into the namespace `hpx::parallel`. The effect
      is similar to what inline namespaces would do, namely all names defined
      in `hpx::parallel::v1` are accessible from the namespace `hpx::parallel`
      as well.]

All parallel
algorithms are very similar in semantics to their sequential counterparts
(as defined in the `namespace std`) with an additional formal template parameter
named `ExecutionPolicy`. The execution policy is generally passed as the first
argument to any of the parallel algorithms and describes the manner in which
the execution of these algorithms may be parallelized and the manner in which
they apply user-provided function objects.

The applications of function objects in parallel algorithms invoked with an
execution policy object of type __sequential_execution_policy__ or
__sequential_task_execution_policy__ execute in sequential order. For
__sequential_execution_policy__ the execution happens in the calling thread.

The applications of function objects in parallel algorithms invoked with an
execution policy object of type __parallel_execution_policy__ or
__parallel_task_execution_policy__ are permitted to execute in an unordered fashion in
unspecified threads, and indeterminately sequenced within each thread.

[important It is the caller's responsibility to ensure correctness, for example
           that the invocation does not introduce data races or deadlocks.]

The applications of function objects in parallel algorithms invoked with an
execution policy of type __parallel_vector_execution_policy__ is in __hpx__
equivalent to the use of the execution policy __parallel_execution_policy__.

Algorithms invoked with an execution policy object of type __execution_policy__
execute internally as if invoked with the contained execution policy object.
No exception is thrown when an __execution_policy__ contains an execution policy
of type __sequential_task_execution_policy__ or __parallel_task_execution_policy__
(which normally turn the algorithm into its asynchronous version). In this case
the execution is semantically equivalent to the case of passing a
__sequential_execution_policy__ or __parallel_execution_policy__ contained in the
__execution_policy__ object respectively.


[heading Parallel Exceptions]

During the execution of a standard parallel algorithm, if temporary memory
resources are required by any of the algorithms and
no memory are available, the algorithm throws a `std::bad_alloc` exception.

During the execution of any of the parallel algorithms, if the application
of a function object terminates with an uncaught exception, the behavior
of the program is determined by the type of execution policy used to invoke
the algorithm:

* If the execution policy object is of type __parallel_vector_execution_policy__,
  [funcref hpx::terminate] shall be called.

* If the execution policy object is of type __sequential_execution_policy__,
  __sequential_task_execution_policy__, __parallel_execution_policy__, or
  __parallel_task_execution_policy__ the execution of
  the algorithm terminates with an __exception_list__ exception. All
  uncaught exceptions thrown during the application of user-provided
  function objects shall be contained in the __exception_list__.

For example, the number of invocations of the user-provided
function object in for_each is unspecified. When __par_for_each__ is
executed sequentially, only one exception will be contained in
the __exception_list__ object.

These guarantees imply that, unless the algorithm has failed to
allocate memory and terminated with `std::bad_alloc`, all
exceptions thrown during the execution of the algorithm are
communicated to the caller. It is unspecified whether an algorithm
implementation will "forge ahead" after encountering and capturing
a user exception.

The algorithm may terminate with the `std::bad_alloc` exception
even if one or more user-provided function objects have terminated
with an exception. For example, this can happen when an algorithm
fails to allocate memory while creating or adding elements to the
__exception_list__ object.

[heading Parallel Algorithms]

__hpx__ provides implementations of the following parallel algorithms:

[template algoref[name] [funcref hpx::parallel::v1::[name] hpx::parallel::[name]]]

[table Non-modifying Parallel Algorithms (In Header: <hpx/include/parallel_algortithm.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref all_of] ]
     [Checks if a predicate is `true` for all  of the elements in a range.]
     [`<hpx/include/parallel_all_any_none.hpp>`]]
    [[ [algoref any_of] ]
     [Checks if a predicate is `true` for any of the elements in a range.]
     [`<hpx/include/parallel_all_any_none.hpp>`]]
    [[ [algoref none_of] ]
     [Checks if a predicate is `true` for none of the elements in a range.]
     [`<hpx/include/parallel_all_any_none.hpp>`]]
    [[ [algoref for_each] ]
     [Applies a function to a range of elements.]
     [`<hpx/include/parallel_for_each.hpp>`]]
    [[ [algoref count] ]
     [Returns the number of elements equal to a given value.]
     [`<hpx/include/parallel_count.hpp>`]]
    [[ [algoref count_if] ]
     [Returns the number of elements satisfying a specific criteria.]
     [`<hpx/include/parallel_count.hpp>`]]
    [[ [algoref equal] ]
     [Determines if two sets of elements are the same.]
     [`<hpx/include/parallel_equal.hpp>`]]
    [[ [algoref mismatch] ]
     [Finds the first position where two ranges differ.]
     [`<hpx/include/parallel_mismatch.hpp>`]]
    [[ [algoref find] ]
     [Finds the first element equal to a given value.]
     [`<hpx/include/parallel_find.hpp>`]]
    [[ [algoref find_end] ]
     [Finds the last sequence of elements in a certain range.]
     [`<hpx/include/parallel_find.hpp>`]]
    [[ [algoref find_if] ]
     [Finds the first element satisfying a specific criteria.]
     [`<hpx/include/parallel_find.hpp>`]]
    [[ [algoref find_first_of] ]
     [Searches for any one of a set of elements.]
     [`<hpx/include/parallel_find.hpp>`]]
    [[ [algoref find_if_not] ]
     [Finds the first element not satisfying a specific criteria.]
     [`<hpx/include/parallel_find.hpp>`]]
    [[ [algoref adjacent_find] ]
     [Computes the differences between adjacent elements in a range.]
     [`<hpx/include/parallel_adjacent_find.hpp>`]]
    [[ [algoref lexicographical_compare] ]
     [Checks if a range of values is lexicographically less than another range
      of values.]
     [`<hpx/include/parallel_lexicographical_compare.hpp>`]]
    [[ [algoref search] ]
     [Searches for a range of elements.]
     [`<hpx/include/parallel_search.hpp>`]]
    [[ [algoref search_n] ]
     [Searches for a number consecutive copies of an element in a range.]
     [`<hpx/include/parallel_search.hpp>`]]
    [[ [algoref inclusive_scan] ]
     [Does an inclusive parallel scan over a range of elements.]
     [`<hpx/include/parallel_scan.hpp>`]]
    [[ [algoref exclusive_scan] ]
     [Does an exclusive parallel scan over a range of elements.]
     [`<hpx/include/parallel_scan.hpp>`]]
]

[table Modifying Parallel Algorithms (In Header: <hpx/include/parallel_algortithm.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref copy] ]
     [Copies a range of elements to a new location.]
     [`<hpx/include/parallel_copy.hpp>`]]
    [[ [algoref copy_n] ]
     [Copies a number of elements to a new location.]
     [`<hpx/include/parallel_copy.hpp>`]]
    [[ [algoref copy_if] ]
     [Copies the elements from a range to a new location for which the given
      predicate is `true`.]
     [`<hpx/include/parallel_copy.hpp>`]]
    [[ [algoref move] ]
     [Moves a range of elements to a new location.]
     [`<hpx/include/parallel_fill.hpp>`]]
    [[ [algoref fill] ]
     [Assigns a range of elements a certain value.]
     [`<hpx/include/parallel_fill.hpp>`]]
    [[ [algoref fill_n] ]
     [Assigns a value to a number of elements.]
     [`<hpx/include/parallel_fill.hpp>`]]
    [[ [algoref transform] ]
     [Applies a function to a range of elements.]
     [`<hpx/include/parallel_transform.hpp>`]]
    [[ [algoref generate] ]
     [Saves the result of a function in a range.]
     [`<hpx/include/parallel_generate.hpp>`]]
    [[ [algoref generate_n] ]
     [Saves the result of N applications of a function.]
     [`<hpx/include/parallel_generate.hpp>`]]
    [[ [algoref remove_copy] ]
     [Copies the elements from a range to a new location that are not equal to
      the given value.]
     [`<hpx/include/parallel_remove_copy.hpp>`]]
    [[ [algoref remove_copy_if] ]
     [Copies the elements from a range to a new location for which the given
      predicate is `false`.]
     [`<hpx/include/parallel_remove_copy.hpp>`]]
    [[ [algoref replace] ]
     [Replaces all values satisfying specific criteria with another value.]
     [`<hpx/include/parallel_replace.hpp>`]]
    [[ [algoref replace_if] ]
     [Replaces all values satisfying specific criteria with another value.]
     [`<hpx/include/parallel_replace.hpp>`]]
    [[ [algoref replace_copy] ]
     [Copies a range, replacing elements satisfying specific criteria with
      another value.]
     [`<hpx/include/parallel_replace.hpp>`]]
    [[ [algoref replace_copy_if] ]
     [Copies a range, replacing elements satisfying specific criteria with
      another value.]
     [`<hpx/include/parallel_replace.hpp>`]]
    [[ [algoref reverse] ]
     [Reverses the order elements in a range.]
     [`<hpx/include/parallel_reverse.hpp>`]]
    [[ [algoref reverse_copy] ]
     [Creates a copy of a range that is reversed.]
     [`<hpx/include/parallel_reverse.hpp>`]]
    [[ [algoref rotate] ]
     [Rotates the order of elements in a range.]
     [`<hpx/include/parallel_rotate.hpp>`]]
    [[ [algoref rotate_copy] ]
     [Copies and rotates a range of elements.]
     [`<hpx/include/parallel_rotate.hpp>`]]
    [[ [algoref swap_ranges] ]
     [Swaps two ranges of elements.]
     [`<hpx/include/parallel_swap_ranges.hpp>`]]
]

[table Set operations on sorted sequences(In Header: <hpx/include/parallel_algortithm.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref includes] ]
     [Returns true if one set is a subset of another.]
     [`<hpx/include/parallel_set_operations.hpp>`]]
    [[ [algoref set_difference] ]
     [Computes the difference between two sets.]
     [`<hpx/include/parallel_set_operations.hpp>`]]
    [[ [algoref set_intersection] ]
     [Computes the intersection of two sets.]
     [`<hpx/include/parallel_set_operations.hpp>`]]
    [[ [algoref set_symmetric_difference] ]
     [Computes the symmetric difference between two sets.]
     [`<hpx/include/parallel_set_operations.hpp>`]]
    [[ [algoref set_union] ]
     [Computes the union of two sets.]
     [`<hpx/include/parallel_set_operations.hpp>`]]
]

[table Minimum/maximum operations (In Header: <hpx/include/parallel_algortithm.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref max_element] ]
     [Returns the largest element in a range.]
     [`<hpx/include/parallel_minmax.hpp>`]]
    [[ [algoref min_element] ]
     [Returns the smallest element in a range.]
     [`<hpx/include/parallel_minmax.hpp>`]]
    [[ [algoref minmax_element] ]
     [Returns the smallest and the largest element in a range.]
     [`<hpx/include/parallel_minmax.hpp>`]]
]

[table Operations checking various sorting criteria (In Header: <hpx/include/parallel_algorithm.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref is_sorted] ]
     [Returns `true` if each element in a range is sorted]
     [`<hpx/include/parallel_is_sorted.hpp>`]]
    [[ [algoref is_sorted_until] ]
     [Returns the first unsorted element]
     [`<hpx/include/parallel_is_sorted.hpp>`]]
    [[ [algoref is_partitioned] ]
     [Returns `true` if each true element for a predicate precedes the false elements in a range]
     [`<hpx/include/parallel_is_partitioned.hpp>`]]
]

[table Numeric Parallel Algorithms (In Header: <hpx/include/parallel_numeric.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref reduce] ]
     [Sums up a range of elements.]
     [`<hpx/include/parallel_reduce.hpp>`]]
    [[ [algoref transform_reduce] ]
     [Sums up a range of elements after applying a function.]
     [`<hpx/include/parallel_transform_reduce.hpp>`]]
    [[ [algoref transform_inclusive_scan] ]
     [Does an inclusive parallel scan over a range of elements after applying
      a function.]
     [`<hpx/include/parallel_scan.hpp>`]]
    [[ [algoref transform_exclusive_scan] ]
     [Does an exclusive parallel scan over a range of elements after applying
      a function.]
     [`<hpx/include/parallel_scan.hpp>`]]
]

[table Dynamic Memory Management (In Header: <hpx/include/parallel_memory.hpp>)
    [[Name]     [Description]   [In Header]]
    [[ [algoref uninitialized_copy] ]
     [Copies a range of objects to an uninitialized area of memory.]
     [`<hpx/include/parallel_uninitialized_copy.hpp>`]]
    [[ [algoref uninitialized_copy_n] ]
     [Copies a number of objects to an uninitialized area of memory.]
     [`<hpx/include/parallel_uninitialized_copy.hpp>`]]
    [[ [algoref uninitialized_fill] ]
     [Copies an object to an uninitialized area of memory.]
     [`<hpx/include/parallel_uninitialized_fill.hpp>`]]
    [[ [algoref uninitialized_fill_n] ]
     [Copies an object to an uninitialized area of memory.]
     [`<hpx/include/parallel_uninitialized_fill.hpp>`]]
]

[endsect]

[section:task_block Using Task Blocks]

The `define_task_block`, `run` and the `wait` functions implemented based on
__cpp11_n4088__ are based on the task_block concept that is a part of the
common subset of the __ppl__ and the __tbb__ libraries.

This implementations adopts a simpler syntax than exposed by those libraries -
one that is influenced by language-based concepts such as spawn and sync from
__cilk_pp__ and async and finish from __x10__. It improves on existing practice
in the following ways:

* The exception handling model is simplified and more consistent with normal
  C++ exceptions.
* Most violations of strict fork-join parallelism can be enforced at compile
  time (with compiler assistance, in some cases).
* The syntax allows scheduling approaches other than child stealing.

Consider an example of a parallel traversal of a tree, where a user-provided
function compute is applied to each node of the tree, returning the sum of the
results:

    template <typename Func>
    int traverse(node& n, Func && compute)
    {
        int left = 0, right = 0;
        define_task_block(
            [&](task_block& tr) {
                if (n.left)
                    tr.run([&] { left = traverse(*n.left, compute); });
                if (n.right)
                    tr.run([&] { right = traverse(*n.right, compute); });
            });

        return compute(n) + left + right;
    }

The example above demonstrates the use of two of the functions,
[funcref hpx::parallel::v2::define_task_block define_task_block] and the
[memberref hpx::parallel::v2::task_block::run run] member
function of a [classref hpx::parallel::v2::task_block task_block].

The `task_block` function delineates a region in a program code potentially
containing invocations of threads spawned by the `run` member function of the
`task_block` class.
The `run` function spawns an __hpx__ thread, a unit of work that is allowed to
execute in parallel with respect to the caller. Any parallel tasks spawned by
`run` within the task block are joined back to a single thread of execution
at the end of the `define_task_block`.
`run` takes a user-provided function object `f` and starts it asynchronously -
i.e. it may return before the execution of `f` completes. The __hpx__
scheduler may choose to run `f` immediately or delay running `f` until compute
resources become available.

A `task_block` can be constructed only by `define_task_block` because it has
no public constructors.
Thus, `run` can be invoked (directly or indirectly) only from a user-provided
function passed to `define_task_block`:

    void g();

    void f(task_block& tr)
    {
        tr.run(g);          // OK, invoked from within task_block in h
    }

    void h()
    {
        define_task_block(f);
    }

    int main()
    {
        task_block tr;      // Error: no public constructor
        tr.run(g);          // No way to call run outside of a define_task_block
        return 0;
    }

[endsect]

[endsect]
