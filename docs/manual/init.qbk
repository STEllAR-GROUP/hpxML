[/=============================================================================
    Copyright (C) 2007-2012 Hartmut Kaiser
    Copyright (C) 2011-2012 Bryce Adelstein-Lelbach

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:init Launching HPX]

[/////////////////////////////////////////////////////////////////////////////]
[section:configuration Configure HPX Applications]

All __hpx__ applications can be configured using special command line options
and/or using special configuration files. This section describes the available
options, the configuration file format, and the algorithm used to locate
possible predefined configuration files. Additionally this section describes
the defaults assumed if no external configuration information is supplied.

During startup any __hpx__ application applies a predefined search pattern to
locate one or more configuration files. All found files will be read and merged
in the sequence they are found into one single internal database holding
all configuration properties. This database is used during the execution of the
application to configure different aspects of the runtime system.

In addition to the ini files any application can supply its own configuration
files which will be merged with the configuration database as well. Moreover,
the user can specify additional configuration parameters on the command
line when executing an application. The _-hpx__ runtime system will merge all
command line configuration options (see the description of the `--hpx::ini`,
`--hpx:config`, and `--hpx::app-config` command line options).


[/////////////////////////////////////////////////////////////////////////////]
[section:ini_format The HPX INI File Format]

All __hpx__ applications can be configured using a special file format which is
similar to the well known __ini_file_format__. This is a structured text format
allowing to group key/value pairs (properties) into sections. The basic element
contained in an ini file is the property. Every property has a name and a
value, delimited by an equals sign (=). The name appears to the left of the
equals sign:
``
    name=value
``
The value may contain equal signs as only the first `'='` character
is interpreted as the delimter between `name` and `value`. Whitespace before
the name, afterthe value and immediately before and after the delimiting equal
sign is ignored. Whitespace inside the value is retained.

Properties may be grouped into arbitrarily named sections. The section name
appears on a line by itself, in square brackets (`[` and `]`). All properties
after the section declaration are associated with that section. There is no
explicit "end of section" delimiter; sections end at the next section
declaration, or the end of the file
``
    [section]
``
In __hpx__ sections can be nested. A nested section has a name composed of
all section names it is embedded in. The section names are concatenated using
a dot (`'.'`):
``
    [outer_section.inner_section]
``
Here `inner_section` is logically nested within `outer_section`.

It is possible to use the full section name concatenated with the property
name to refer to a particular property. For example in:
``
    [a.b.c]
    d = e
``
the property value of `d` can be referred to as `a.b.c.d=e`.

In __hpx__ ini files can contain comments. Hash signs (`'#'`) at the beginning
of a line indicate a comment. All characters starting with the `'#'` until the
end of line are ignored.

If a property with the same name is reused inside a section, the second
occurrence of this property name will override the first occurrence (discard the
first value). Duplicate sections simply merge their properties together, as if
they occurred contiguously.

[teletype]
In __hpx__ ini files, a property value `${FOO:default}` will use the environmental
variable `FOO` to extract the actual value if it is set and `default` otherwise.
No default has to be specified. Therefore `${FOO}` refers to the environmental
variable `FOO`. If `FOO` is not set or empty the overall expression will evaluate
to an empty string. A property value `$[section.key:default]` refers to the value
held by the property `section.key` if it exists and `default` otherwise. No
default has to be specified. Therefore `$[section.key]` refers to the property
`section.key`. If the property `section.key` is not set or empty the overall
expression will evaluate to an empty string.

[note Any property `$[section.key:default]` is evaluated whenever it is queried
      and not when the configuration data is initialized. This allows for lazy
      evaluation and relaxes initialization order of different sections. The
      only exception are recursive property values, e.g. values referring to
      the very key they are associated with. Those property values are evaluate
      at initialization time to avoid infinite recursion.]
[c++]

[endsect] [/ The HPX INI File Format]

[/////////////////////////////////////////////////////////////////////////////]
[section:config_defaults Built-in Default Configuration Settings]

During startup any __hpx__ application applies a predefined search pattern to
locate one or more configuration files. All found files will be read and merged
in the sequence they are found into one single internal data structure holding
all configuration properties.

As a first step the internal configuration database is filled with a set of
default configuration properties. Those settings are described on a section
by section basis.

['[*The `system` Configuration Section]]

[teletype]
``
    [system]
    pid = <process-id>
    prefix = <current prefix path>
``
[c++]

[table
    [[Property]         [Description]                                 [Remark]]
    [[`system.pid`]     [This is initialized to store the current
                         OS-process id of the application instance]   [dynamic information]]
    [[`system.prefix`]  [This is initialized to the base directory
                         __hpx__ has been loaded from.]               [dynamic information]]
]

['[*The `hpx` Configuration Section]]

[teletype]
``
    [hpx]
    location = ${HPX_LOCATION:$[system.prefix]}
    component_path = $[hpx.location]/lib/hpx
    ini_path = $[hpx.location]/share/hpx-<version>/ini
    finalize_wait_time = ${HPX_FINALIZE_WAIT_TIME:-1.0}
    shutdown_timeout = ${HPX_SHUTDOWN_TIMEOUT:-1.0}
    default_stack_size = ${HPX_DEFAULT_STACK_SIZE:<hpx_default_stack_size>}
``
[c++]

[table
    [[Property]                 [Description]                                 [Remark]]
    [[`hpx.location`]           [This is initialized to the id of the
                                 locality this application instance is
                                 running on.]                                 [dynamic information]]
    [[`hpx.component_path`]     [This is initialized to the default
                                 directory where the __hpx__ runtime
                                 library will look for installed
                                 components.]                                 [static information]]
    [[`hpx.ini_path`]           [ ]                     [static information]]
    [[`hpx.finalize_wait_time`] [ ]               [static information]]
    [[`hpx.shutdown_timeout`]   [ ]               [static information]]
    [[`hpx.default_stack_size`] [ ]               [static information, depending on compile time preprocessor constant (`HPX_DEFAULT_STACK_SIZE`)]]
]

['[*The `hpx.components` Configuration Section]]

[teletype]
``
    [hpx.components]
    load_external = ${HPX_LOAD_EXTERNAL_COMPONENTS:1}
``
[c++]

[table
    [[Property]             [Description]                                 [Remark]]
    [[`hpx.components.load_external`] [ ]               [ ]]
]

Additionally, the section `hpx.components` will be populated with the
information gathered from all found components. The information loaded for each
of the components will contain at least the folowing properties:

[teletype]
``
    [hpx.components.<component_instance_name>]
    name = <component_name>
    path = <full_path_of_the_component_module>
    enabled = $[hpx.components.load_external]
``
[c++]

[table
    [[Property]             [Description]                                 [Remark]]
    [[`hpx.components.load_external`] [ ]               [ ]]
]



['[*The `hpx.parcel` Configuration Section]]

[teletype]
``
    [hpx.parcel]
    address = ${HPX_PARCEL_SERVER_ADDRESS:<hpx_initial_ip_address>}
    port = ${HPX_PARCEL_SERVER_PORT:<hpx_initial_ip_port>}
    max_connections_cache_size = ${HPX_MAX_PARCEL_CONNECTION_CACHE_SIZE:<hpx_max_parcel_connection_cache_size>}
    max_connections_per_locality = ${HPX_MAX_PARCEL_CONNECTIONS_PER_LOCALITY:<hpx_max_parcel_connections_per_locality}
``
[c++]

[table
    [[Property]             [Description]                                 [Remark]]
    [[`hpx.parcel.address`] [ ]               [ ]]
    [[`hpx.parcel.port`] [ ]               [ ]]
    [[`hpx.parcel.max_connections_cache_size`] [ ]               [ ]]
    [[`hpx.parcel.max_connections_per_locality`] [ ]               [ ]]
]

['[*The `hpx.agas` Configuration Section]]

[teletype]
``
    [hpx.agas]
    address = ${HPX_AGAS_SERVER_ADDRESS:<hpx_initial_ip_address>}
    port = ${HPX_AGAS_SERVER_PORT:<hpx_initial_ip_port>}
    max_pending_refcnt_requests = ${HPX_AGAS_MAX_PENDING_REFCNT_REQUESTS:<hpx_initial_agas_max_pending_refcnt_requests>}
    service_mode = hosted
    dedicated_server = 0
    local_cache_size = ${HPX_AGAS_LOCAL_CACHE_SIZE:<hpx_initial_agas_local_cache_size>}
    use_range_caching = ${HPX_AGAS_USE_RANGE_CACHING:1}
    use_caching = ${HPX_AGAS_USE_CACHING:1}
``
[c++]

[table
    [[Property]             [Description]                                 [Remark]]
    [[`hpx.agas.address`] [ ]               [ ]]
    [[`hpx.agas.port`] [ ]               [ ]]
    [[`hpx.agas.max_pending_refcnt_requests`] [ ]               [ ]]
    [[`hpx.agas.service_mode`] [ ]               [ ]]
    [[`hpx.agas.dedicated_server`] [ ]               [ ]]
    [[`hpx.agas.local_cache_size`] [ ]               [ ]]
    [[`hpx.agas.use_range_caching`] [ ]               [ ]]
    [[`hpx.agas.use_caching`] [ ]               [ ]]
]

[endsect] [/ Default Configuration Settings]

[endsect] [/ Configure HPX Applications]

[/////////////////////////////////////////////////////////////////////////////]
[section:logging Logging]

HPX logging uses a sophisticated logging framework allowing to follow in detail
what operations have been performed inside the HPX library in what sequence.
This information proves to be very useful for diagnosing problems or just for
improving the understanding what is happening in HPX as a consequence of
invoking HPX API functionality.

Generally, logging can be customized either using environment variable settings
or using by an ini configuration file. Logging is generated in several
categories, each of which can be customized independently. All customizable
configuration parameters have resonable defaults, allowing to use logging
without any additional configuration effort. The follwoing table lists the
available categories.

[table Logging categories
    [[Category]       [Category shortcut] [Information to be generated]         [Environment variable]]
    [[General]        [None][Logging information generated by different subsystems
                       of HPX, such as thread-manager, parcel layer, LCOs,
                       etc.]                                                    [`HPX_LOGLEVEL`]]
    [[AGAS]           [`AGAS`][Logging output generated by the AGAS subsystem]  [`HPX_AGAS_LOGLEVEL`]]
    [[Application]    [`APP`][Logging generated by applications.]               [`HPX_APP_LOGLEVEL`]]
]

By default, all logging output is redirected to the console instance of an
application, where it is collected and written to a file, one file for each
logging category.

Each logging category can be customized at two levels, the parameters for each
are stored in the ini configuration sections `hpx.logging.CATEGORY` and
`hpx.logging.console.CATEGORY` (where 'CATEGORY' is the category shortcut as
listed in the table above). The former influences logging at the source
locality and the latter modifies the logging behaviour for each of the
categories at the console instance of an application.

[heading Levels]

All HPX logging output have seven different logging levels. These levels can
be set explicitly or through environmental variables in the main HPX ini file
as shown below. The logging levels and their associated integral values are
shown in the table below, ordered from most verbose to least verbose. By
default, all HPX logs are set to 0, e.g. all logging output is disabled by
default.

[table Logging levels
    [[Logging level]    [Integral value]]
    [[<debug>]          [5]]
    [[<info>]           [4]]
    [[<warning>]        [3]]
    [[<error>]          [2]]
    [[<fatal>]          [1]]
    [[No logging]       [0]]
]

[tip The easiest way to enable logging output is to set the environment variable
     corresponding to the logging category to an integral value as described in
     the table above. For instance, setting `HPX_LOGLEVEL=4` will enable full
     logging output for the general category. Please note, that the syntax and
     means of setting environment variables varies between operating systems.]

[heading Configuration]

Logs will be saved to destinations as configured by the user. By default, logging
output is saved on the console instance of an application to
`hpx.CATEGORY.PID.log` (where CATEGORY and PID are placeholders for the category
shortcut and the OS process id). The output for
the general logging category is saved to `hpx.PID.log`. The default settings for
the general logging category are show here (the syntax is described in the
section __iniformat__):

[teletype]
``
    [hpx.logging]
    level = ${HPX_LOGLEVEL:0}
    destination = ${HPX_LOGDESTINATION:console}
    format = ${HPX_LOGFORMAT:(T%locality%/%hpxthread%.%hpxphase%/%hpxcomponent%) P%parentloc%/%hpxparent%.%hpxparentphase% %time%($hh:$mm.$ss.$mili) [%idx%]|\\n}
``
[c++]

The logging level is taken from the environment variable `HPX_LOGLEVEL` and
defaults to zero, e.g. no logging. The default logging destination is read from
the environment vaiable `HPX_LOGDESTINATION`. On any of the localities it
defaults to `console` which redirects all generated logging output to the
console instance of an application. The following table lists the possible
destinations for any logging output. It is possible to specify more than one
destination separaneted by whitespace.

[table Logging destinations
    [[Logging destination]      [Description]]
    [[file(<filename>)]         [Direct all output to a file with the given
                                 <filename>.]]
    [[cout]                     [Direct all output to the local standard output
                                 of the application instance on this locality.]]
    [[cerr]                     [Direct all output to the local standard error
                                 output of the application instance on this
                                 locality.]]
    [[console]                  [Direct all output to the console instance of
                                 the application. The console instance has its
                                 logging destinations configured separately.]]
]

The logging format is read from the environment variable `HPX_LOGFORMAT` and
it defaults to a complex format description. This format consists of several
placeholder fields (for instance `%locality%`) which will be replaced by
concrete values when the logging output is generated. All other information
is transferred verbatim to the output. The table below describes the available
field placeholders. The separator character `|` separates
the logging message prefix formatted as shown and the actual log message which
will replace the separator.

[table Available field placeholders
    [[Name]           [Description]]
    [[locality]       [The id of the locality on which the logging message was
                       generated.]]
    [[hpxthread]      [The id of the HPX-thread generating this logging
                       output.]]
    [[hpxphase]       [The phase[footnote The phase of a HPX-thread counts how
                       often this thread has been activated] of the HPX-thread
                       generating this logging output.]]
    [[hpxcomponent]   [The local virtual address of the component which the
                       current HPX-thread is accessing.]]
    [[parentloc]      [The id of the locality where the HPX thread was running
                       which initiated the current HPX-thread. The current
                       HPX-thread is generating this logging output.]]
    [[hpxparent]      [The id of the HPX-thread which initiated the current
                       HPX-thread. The current HPX-thread is generating this
                       logging output.]]
    [[hpxparentphase] [The phase of the HPX-thread when it initiated the current
                       HPX-thread. The current HPX-thread is generating this
                       logging output.]]
    [[time]           [The time stamp for this logging outputline as generated
                       by the source locality.]]
    [[idx]            [The sequence number of the logging output line as
                       generated on the source locality.]]
    [[osthread]       [The sequence number of the OS-thread which executes the
                       current HPX-thread.]]
]

[note Not all of the field placeholder may be expanded for all generated
      logging output. If no value is available for a particular field it is
      replaced with a sequence of `'-'` characters.]

Here is an example line from a logging output generated by one of the HPX
examples:

[teletype]
``
    (T00000000/0000000002d46f90.01/00000000009ebc10) P--------/0000000002d46f80.02 17:49.37.320 [000000000000004d]
    <info>  [RT] successfully created component {0000000100ff0001, 0000000000030002} of type: component_barrier[7(3)]
``
[c++]

The default settings for the general logging category on the console is shown
here:

[teletype]
``
    [hpx.logging.console]
    level = ${HPX_LOGLEVEL:$[hpx.logging.level]}
    destination = ${HPX_CONSOLE_LOGDESTINATION:file(hpx.$[system.pid].log)}
    format = ${HPX_CONSOLE_LOGFORMAT:|}
``
[c++]

These settings define how the logging is customized once the logging output
is received by the console instance of an application. The logging level
is read from the environment variable `HPX_LOGLEVEL` (as set for the console
instance of the application). The level defaults to the same values as the
corresponding settings in the general logging configuration shown before. The
destination on the console instance is set to be a file which name is generated
based from its OS process id. Setting the environment variable
`HPX_CONSOLE_LOGDESTINATION` allows to customize the naming scheme for the
output file. The logging format is set to leave the original logging output
unchanged, as received from one of the localities the application runs on.

[endsect] [/ Logging]

[endsect]

