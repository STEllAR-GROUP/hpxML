[/=============================================================================
    Copyright (C) 2007-2012 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:performance_counters Performance Counters]

Performance Counters in __hpx__ are used to provide information as to how well
the runtime system or an application is performing. The counter data can help
determine system bottlenecks and fine-tune system and application performance.
The __hpx__ runtime system, its networking and other layers provide counter
data that an application can consume to provide users with information of how
well the application is performing.

Applications can also use counter data to determine how much system resources
to consume. For example, an application that transfers data over the network
could consume counter data from an  network switch to determine how much data
to transfer without competing for network bandwidth with other network traffic.
The application could use the counter data to adjust its transfer rate as the
bandwidth usage from other network traffic increases or decreases.

Performance Counters are __hpx__ parallel processes which expose a predefined
interface. __hpx__ exposes special API functions allowing to create, manage,
access the data from, and release instances of Performance Counters. The main
means to identify a Performance Counter instance is the counter instance name.
Performance Counter instance names have a predefined structure which is
described in the section __counter_names__. The main advantages of this is that
any Performance Counter can be accessed remotely (from a different locality)
or locally (from the same locality). Moreover, since all counters expose their
data using the same API, any code consuming counter data can be utilized to
access arbitrary system information with minimal effort.

Consumers of counter data can consume counter data in real time. Real time data
describes the current activity of the computer. More information about how
to consume counter data can be found in the section __consuming_counters__.

All __hpx__ applications provide command line options related to performance
counters, such as the possibility to list available counter types, or
periodically query the counter data of specific counters to be printed to the
screen or to be written to a file. For more information about these, please
refer to the section __commandline__.

[/////////////////////////////////////////////////////////////////////////////]
[section:names Performance Counter Names]

All Performance Counter instances have a name uniquely identifying this
instance. This name can be used to access the counter, retrieve all related meta
data, and to query the counter data (as described in the section
__consuming_counters__). Counter names are strings with a predefined structure.
The general form of a countername is:

[teletype]
```
    /objectname{full_instancename}/countername@parameters
```
[c++]

where `full_instancename` could be either another (full) counter name or a
string formatted as:

[teletype]
```
    parentinstancename#parentindex/instancename#instanceindex
```
[c++]

Each separate part of a countername (e.g. `objectname`, `countername`,
`parentinstancename`, `instancename`, and `parameters`) should start
with a letter (`'a'`...`'z'`, `'A'`...`'Z'`) or an underscore character (`'_'`),
optionally followed by letters, digits (`'0'`...`'9'`), hyphen (`'-'`),
or underscore characters. Whitespace is not allowed inside a counter name.
The characters `'/'`, `'{'`, `'}'`, `'#'`, and `'@'` have a special meaning and
are used to delimit the different parts of the counter name.

[heading:example Two Simple Examples]

An instance for a well formed (and meaningful) simple counter name would be:

```
    /threads{``*locality#0/total*``}/count/cumulative
```

This counter returns the current cumulative number of executed (retired)
__hpx__-threads for the locality `0`. The counter type of this counter is
`/threads/count/cumulative` and the full instance name is [teletype]`locality#0/total`[c++]
(*highlighted* for readability). This counter type does not require an
`instanceindex` or `parameters` to be specified.

In this case, the `parentindex` (the `'0'`) designates the locality for which
the counter instance is created. The counter will return the number of
__hpx__-threads retired on that particular locality.

Another example for a well formed (aggregate) counter name is:

[teletype]
```
    /statistics{``*/threads{locality#0/total}/count/cumulative*``}/average@500
```
[c++]

This counter takes the simple counter from the first example, samples its
values every `500` milliseconds, and returns the average of the value samples
whenever it is queried. The counter type of this counter is `/statistics/average`
and the instance name is the full name of the counter for which the values have
to be averaged. In this case, the `parameters` (the `'500'`) specify the sampling
interval for the averaging to take place (in milliseconds).


[heading:types Performance Counter Types]

Every Performance Counter belongs to a specific Performance Counter type which
classifies the counters into groups of common semantics. The type of a counter
is identified by the `objectname` and the `countername` parts of the name.

    /objectname/countername

At application start, __hpx__ will register all available counter types on each
of the localities. These counter types are held in a special Performance
Counter registration database which can be later used to retrieve the meta data
related to a counter type and to create counter instances based on a given
counter instance name.

[heading:types Performance Counter Instances]

The `full_instancename` allows to distinguish different counter instances of
the same counter type. The formatting of the `full_instancename` depends on
the counter type. There are two types of counters: simple counters which
usually generate the counter values based on direct measurements, and
aggregate counters which take another counter and transform its values before
generating their own counter values. An example for a simple counter is given
[link hpx.manual.performance_counters.names.example above]: counting retired
__hpx__-threads. An aggreagate counter is shown as an example
[link hpx.manual.performance_counters.names.example above] as well:
calculating the average of the underlying counter values sampled at constant
time intervals.

While simple counters use instance names formatted as
`parentinstancename#parentindex/instancename#instanceindex`, most aggregate
counters have the full counter name of the embedded counter as its instance
name.

Not all simple counter types require specifying all 4 elements of a
full counter instance name, some of the parts (`parentinstancename`,
`parentindex`, `instancename`, and `instanceindex`) are optional for specific
counters. Please refer to the documentation of a particular counter for more
information about the formatting requirements for the name of this counter.

The `parameters` are used to pass additional information to a counter at
creation time. They are optional and they fully depend on the concrete counter.
Even if a specific counter type allows additional parameters to be given, those
usually are not required as sensible defaults will be chosen. Please refer
to the documentation of a particular counter for more information about what
parameters are supported, how to specify them, and what default values are
assumed.

Every locality of an application exposes its own set of Performance
Counter types and Performance Counter instances. The set of exposed counters
is determinded dynamically at application start based on the execution
environment of the application. For instance, this set is influenced by the
current hardware environment for the locality (such as whether the locality has
access to accelerators), and the software environment of the application (such
as the number of OS-threads used to execute __hpx__-threads).

[endsect] [/ Performance Counter Names]

[/////////////////////////////////////////////////////////////////////////////]
[section:consuming Consuming Performance Counter Data]
[endsect] [/ Consuming Performance Counter Data]

[/////////////////////////////////////////////////////////////////////////////]
[section:providing Providing Performance Counter Data]
[endsect] [/ Providing Performance Counter Data]

[/////////////////////////////////////////////////////////////////////////////]
[section:counters Existing __hpx__ Performance Counters]

The __hpx__ runtime system exposes a wide variety of predefined Performance
Counters. These counters expose critical information about different modules of
the runtime system. They can help determine system bottlenecks and fine-tune
system and application performance.

[teletype]
[/////////////////////////////////////////////////////////////////////////////]
[table AGAS Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Parameters] [Description]]
    [   [`/agas/count/<agas_service>`

          where `<agas_service>` is one of the following:
            `allocate`, `bind`, `bind_gid`, `bind_name`, `bind_prefix`,
            `change_credit_non_blocking`, `change_credit_sync`, `free`,
            `iterate_names`, `iterate_types`, `localities`, `resolve`,
            `resolve_gid`, `resolve_id`, `resolve_locality`, `unbind`,
            `unbind_gid`, `unbind_name`.
        ]
        [`<agas_instance>/total`

          where `<agas_instance>` is the name of the AGAS service to query.
          Currently, this value will be `root` as we do not have distributed
          AGAS services implemented yet.
        ]
        [None]
        [Returns the total number of invocations of the specified AGAS service
         since its creation.]
    ]
    [   [`/agas/time/<agas_service>`

          where `<agas_service>` is one of the following:
            `allocate`, `bind`, `bind_gid`, `bind_name`, `bind_prefix`,
            `change_credit_non_blocking`, `change_credit_sync`, `free`,
            `iterate_names`, `iterate_types`, `localities`, `resolve`,
            `resolve_gid`, `resolve_id`, `resolve_locality`, `unbind`,
            `unbind_gid`, `unbind_name`.
        ]
        [`<agas_instance>/total`

          where `<agas_instance>` is the name of the AGAS service to query.
          Currently, this value will be `root` as we do not have distributed
          AGAS services implemented yet.
        ]
        [None]
        [Returns the overall execution time of the specified AGAS service
         since its creation (in nanoseconds).]
    ]
    [   [`/agas/count/<cache_statistics>`

          where `<cache_statistics>` is one of the following:
          `cache-evictions`, `cache-hits`, `cache-inserts`, `cache-misses`
        ]
        [`locality#<*>/total`

          where `<*>` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Returns the number of cache events (evictions, hits, inserts, and
         misses) in the AGAS cache of the specified locality.]
    ]
]

[/////////////////////////////////////////////////////////////////////////////]
[table Parcel Layer Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Parameters] [Description]]
    [   [`/data/count/<operation>`

          where `<operation>` is one of the following:
          `sent`, `received`
        ]
        [`locality#<*>/total`

          where `<*>` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Return the overall number of bytes transferred (see `<operation>`,
         e.g. `sent` or `received`) over the network by the given locality.]
    ]
    [   [`/data/time/<operation>`

          where `<operation>` is one of the following:
          `sent`, `received`
        ]
        [`locality#<*>/total`

          where `<*>` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Return the total time (in nanoseconds) between the start of each
         asynchronous network operation and the end of the corresponding
         transfer operation the given locality (see `<operation>`, e.g. `sent`
         or `received`).]
    ]
    [   [`/messages/count/<operation>`

          where `<operation>` is one of the following:
          `sent`, `received`
        ]
        [`locality#<*>/total`

          where `<*>` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Return the overall number of messages [footnote A message can
         potentially consist of more than one parcel.] transferred over the
         network by the given locality (see `<operation>`, e.g. `sent` or
         `received`).]
    ]
    [   [`/parcels/count/<operation>`

          where `<operation>` is one of the following:
          `sent`, `received`
        ]
        [`locality#<*>/total`

          where `<*>` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Return the overall number of parcels transferred over the network by
         the given locality (see `<operation>`, e.g. `sent` or `received`).]
    ]
    [   [`/parcelqueue/length`

          where `<operation>` is one of the following:
          `sent`, `received`
        ]
        [`locality#<*>/total`

          where `<*>` is the locality id of the locality the AGAS cache should
          be queried. The locality id is a (zero based) number identifying the
          locality.
        ]
        [None]
        [Return the overall number of parcels transferred (see `<operation>`,
         e.g. `sent` or `received`) over the network by the given locality.]
    ]
]
[/
    /serialize{locality#<*>/total}/time/received
    /serialize{locality#<*>/total}/time/sent
]

[/////////////////////////////////////////////////////////////////////////////]
[table Thread Manager Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Parameters] [Description]]
]

[/
    /threadqueue{locality#<*>/total}/length
    /threadqueue{locality#<*>/worker-thread#<*>}/length
    /threads{locality#<*>/total}/count/cumulative
    /threads{locality#<*>/worker-thread#<*>}/count/cumulative
    /threads{locality#<*>/total}/count/instantaneous/active
    /threads{locality#<*>/worker-thread#<*>}/count/instantaneous/active
    /threads{locality#<*>/total}/count/instantaneous/all
    /threads{locality#<*>/worker-thread#<*>}/count/instantaneous/all
    /threads{locality#<*>/total}/count/instantaneous/pending
    /threads{locality#<*>/worker-thread#<*>}/count/instantaneous/pending
    /threads{locality#<*>/total}/count/instantaneous/suspended
    /threads{locality#<*>/worker-thread#<*>}/count/instantaneous/suspended
    /threads{locality#<*>/total}/count/instantaneous/terminated
    /threads{locality#<*>/worker-thread#<*>}/count/instantaneous/terminated
    /threads{locality#<*>/allocator#<*>}/count/objects
    /threads{locality#<*>/total}/count/stack-recycles
    /threads{locality#<*>/total}/idle-rate
    /threads{locality#<*>/worker-thread#<*>}/idle-rate
]

[/////////////////////////////////////////////////////////////////////////////]
[table General Performance Counters
    [[Counter Type] [Counter Instance Formatting] [Parameters] [Description]]
]

[/////////////////////////////////////////////////////////////////////////////]
[table Performance Counters for General Statistics
    [[Counter Type] [Counter Instance Formatting] [Parameters] [Description]]
    [   [`/statistics/average`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals.]
        [Returns the current average value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume 1000ms as the default.]
    ]
    [   [`/statistics/max`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals.]
        [Returns the current maximum value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume 1000ms as the default.]
    ]
    [   [`/statistics/min`]
        [Any full performance counter name. The referenced performance counter
         is queried at fixed time intervals.]
        [Returns the current minimum value calculated based on the values
         queried from the underlying counter (the one specified as the instance
         name).]
        [Any parameter will be interpreted as the time interval (in
         milliseconds) at which the underlying counter should be queried. If
         no value is specified, the counter will assume 1000ms as the default.]
    ]
]

[/
    /full_empty{locality#<*>/total}/count/constructed
    /full_empty{locality#<*>/total}/count/destructed
    /full_empty{locality#<*>/total}/count/read_dequeued
    /full_empty{locality#<*>/total}/count/read_enqueued
    /full_empty{locality#<*>/total}/count/set_full

    /dataflow{locality#<*>/total}/count/constructed
    /dataflow{locality#<*>/total}/count/initialized
    /dataflow{locality#<*>/total}/count/fired
    /dataflow{locality#<*>/total}/count/destructed

    /runtime{locality#<*>/total}/component/count
    /runtime{locality#<*>/total}/uptime
]

[c++]

[endsect] [/ Existing __hpx__ Performance Counters]

[endsect] [/ Performance Counters]

