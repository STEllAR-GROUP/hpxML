[/=============================================================================
Copyright (C) 2007-2012 Hartmut Kaiser

Distributed under the Boost Software License, Version 1.0. (See accompanying 
file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:examples Examples]

Here are some more examples for our reader to get more familiar with HPX style 
programming.

[/////////////////////////////////////////////////////////////////////////////]
[section:hello_world Hello World v2]

You have already looked at a simple ["Hello World] example.  In this version 
each locality will print out a statement that says which OS thread executed it
and which locality it came from.  The output will look something like this:

[pre
[^hello world from OS-thread 2 on locality 0]
[^hello world from OS-thread 5 on locality 2]
[^hello world from OS-thread 0 on locality 0]
]

The source file is already created for you and could be found in the svn 
repository in: [^parallex/hpx/examples/quickstart/hello_world.cpp] or a 
here [fixme add a link here].  To compile this file type:

[pre[^make examples.quickstart.hello_world]]

To run the program type:

[pre[^./bin/hello_world]]

This should print: 

[pre[^hello world from OS-thread 0 on locality 0]]

To include more threads use the command line option ['-t] and type the number of threads that you wish to use.  For example, typing:

[pre[^./bin/hello_world -t2]]

will yeild:

[pre
[^hello world from OS-thread 0 on locality 0]
[^hello world from OS-thread 0 on locality 0]
]

[fixme explain how to run hello world on multiple localites]

Now that you can complile and run the code lets look at how the code works
begining with main:

[import ../examples/quickstart/hello_world.cpp]
[main]

[endsect] [/Hello World]
[/////////////////////////////////////////////////////////////////////////////]
[section:accumulator Accumulator]
Accumulator is a simple example that exposes the notion of components in HPX. 
Components allow us to run applicationin in distributed environment in HPX. 
This example exposes four differenct functions: init, add, query and print.
What this example does is it takes an input from a client locality component, 
puts value in a data type (unsigned long) at the remote locality component.
Print command at the client would print the contents of the remote locality 
component at the remote locality. Query command at the client would print the 
contents of the remote locality component at client locality. 

[Building the example]
From your build directory, type the following:
[pre[^make examples.accumulator.accumulator]]

[Run the example]
From your bin directory inside install path, type the following:
a) On single machine, first console:
[pre[^./accumulator_client -0 -l2]]
Same machine, second console, on identical path as above:
[pre[^./accumulator_client -1 -l2]]
Result:
    Console 1:
[pre
[^accumulator client, you may enter some commands (try 'help' if in doubt...)]
[^add 5]
[^print]
[^query]
[^{0000000200ff0001, 000000000002ffff}> 5]
[^print]
[^add 5]
[^print]
[^query]
[^{0000000200ff0001, 000000000002ffff}> 10]
[^quit]
]


    Console 2:
[pre
[^{0000000200000000, 00007fff21db4860}> 5]
[^{0000000200000000, 00007fff21db4860}> 5]
[^{0000000200000000, 00007fff21db4860}> 10]
]

[endsect] [/Accumulator]
[/////////////////////////////////////////////////////////////////////////////]

[endsect] [/Examples]
