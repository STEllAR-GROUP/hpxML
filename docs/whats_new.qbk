[/==============================================================================
    Copyright (C) 2007-2015 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:whats_new What's New]

[section:hpx_0_9_11 __hpx__ V0.9.11]

[heading General Changes]

* Added integration with the [@https://circleci.com/gh/STEllAR-GROUP/hpx CircleCI]
  hosted continuous integration service. This gives us constant and immediate
  feedback on the health of our master branch.
* The compiler configuration subsystem has been reimplemented. Instead of using
  Boost.Config we now use our own lightweight set of cmake scripts to determine
  the available language and library features supported by the used compiler.
* The API for creating instances of components has been consolidated. All
  component instances should be created using the [funcref hpx::new_ `hpx::new_<>()`]
  only. It allows to instantiate both, single component instances and multiple
  component instances. The placement of the created components can be controlled
  by special distribution policies. Please see the corresponding documentation
  outlining the use of [funcref hpx::new_ `hpx::new_<>()`].
* Introduced four new distribution policies which can be used with many API
  functions which traditionally expected to be used with a locality id. The
  new distribution policies are:
  * [classref hpx::components::default_distribution_policy `hpx::default_distribution_policy`]
    which tries to place multiple component instances as evenly as possible.
  * [classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`]
    which will refer to the locality where a given component instance is
    currently placed.
  * [classref hpx::components::binpacking_distribution_policy `hpx::binpacking_distribution_policy`]
    which will place multiple component instances as evenly as possible based
    on any performance counter.
  * [classref hpx::components::target_distribution_policy `hpx::target_distribution_policy`]
    which allows to represent a given locality in the context of a distribution
    policy.
* The new distribution policies can now be also used with `hpx::async`. This
  change also deprecates `hpx::async_colocated(id, ...)` which now is replaced
  by a distribution policy: `hpx::async(hpx::colocated(id), ...).
* The `hpx::vector` and `hpx::unordered_map` data structures can now be used
  with the new distribution policies as well.
* The parallel facility `hpx::parallel::task_region` has been renamed to
  [classref hpx::parallel::v2::task_block `hpx::parallel::task_block`] based on
  the changes in the corresponding standardization proposal __cpp11_n4088__.
* Added extensions to the parallel facility
  [classref hpx::parallel::v2::task_block `hpx::parallel::task_block`] allowing
  to combine a task+_block with an execution policy. This implies a minor
  breaking change as the `hpx::parallel::task_block` is now a template.
* Added new LCOs: `hpx::lcos::latch` and `hpx::lcos::local::latch` which
  semantically conform to the proposed `std::latch` (see __cpp17_n4399__).

[heading Breaking Changes]

* The CMake project name has changed from 'hpx' to 'HPX' for consistency and 
  compatibilty with naming conventions and other CMake projects. Generated
  config files go into <prefix>/lib/cmake/HPX and not <prefix>/lib/cmake/hpx.
* The macro `HPX_REGISTER_MINIMAL_COMPONENT_FACTORY` has been deprecated. Please
  use [macroref HPX_REGISTER_COMPONENT `HPX_REGISTER_COMPONENT`] instead.
  The old macro will be removed in the next release.
* The obsolete distributing_factory and binpacking_factory components have been
  removed. The corresponding functionality is now provided by the
  [funcref hpx::new_ `hpx::new_<>()`] API function in conjunction with the
  `hpx::default_layout` and `hpx::binpacking` distribution policies
  ([classref hpx::components::default_distribution_policy `hpx::default_distribution_policy`] and
  [classref hpx::components::binpacking_distribution_policy `hpx::binpacking_distribution_policy`])
* The API function `hpx::new_colocated` has been deprecated. Please use the
  consolidated API [funcref hpx::new_ `hpx::new_`] in conjunction with the new
  `hpx::colocated` distribution policy
  ([classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`])
  instead. The old API function will still be available for at least one
  release of __hpx__ if the configuration variable
  `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY` is enabled.
* The API function `hpx::async_colocated` has been deprecated. Please use the
  consolidated API `hpx::async` in conjunction with the new `hpx::colocated`
  distribution policy
  ([classref hpx::components::colocating_distribution_policy `hpx::colocating_distribution_policy`])
  instead. The old API function will still be available for
  at least one  release of __hpx__ if the configuration variable
  `HPX_WITH_COLOCATED_BACKWARDS_COMPATIBILITY` is enabled.
* The obsolete remote_object component has been removed.
* Replaced the use of Boost.Serialization with our own solution. While the new
  version is mostly compatible with Boost.Serialization, this change requires
  some minor code modifications in user code. For more information, please see the
  corresponding [@https://mail.cct.lsu.edu/pipermail//hpx-users/2015-April/000558.html announcement]
  on the __stellar_list__ mailing list.
* The names used by cmake to influence various configuration options have been
  unified. The new naming scheme relies on all configuration constants to start
  with `HPX_WITH_...`, while the preprocessor constant which is used at build
  time starts with `HPX_HAVE_...`. For instance, the former cmake command line
  `-DHPX_MALLOC=...` now has to be specified a `-DHPX_WITH_MALLOC=...` and will
  cause the preprocessor constant `HPX_HAVE_MALLOC` to be defined. The actual
  name of the constant (i.e. `MALLOC`) has not changed. Please see the
  corresponding documentation for more details (__cmake_options__).
* The `get_gid()` functions exposed by the component base classes
  `hpx::components::server::simple_component_base`,
  `hpx::components::server::managed_component_base`, and
  `hpx::components::server::fixed_component_base` have been replaced by two new
  functions: `get_unmanaged_id()` and `get_id()`. To enable the old function
  name for backwards compatibility, use the cmake configuration option
  `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY=On`.
* All functions which were named `get_gid()` but were returning `hpx::id_type`
  have been renamed to `get_id()`. To enable the old function names for
  backwards compatibility, use the cmake configuration option
  `HPX_WITH_COMPONENT_GET_GID_COMPATIBILITY=On`.


[heading Bug Fixes (Closed Tickets)]

Here is a list of the important tickets we closed for this release.

* [pr    1608] - Fixed running multiple localities without localities parameter
* [issue 1606] - Running without localities parameter binds to bogus port range
* [issue 1605] - Too many serializations
* [pr    1604] - Changes the HPX image into a hyperlink
* [pr    1599] - Duplicate binding of global ids should fail
* [pr    1598] - Fixing array access
* [pr    1597] - Improved the reliability of connecting/disconnecting localities
* [issue 1596] - Duplicate id binding should fail
* [pr    1595] - Fixing more cmake config constants
* [pr    1594] - Fixing preprocessor constant used to enable C++11 chrono
* [pr    1593] - Adding operator|() for hpx::launch
* [issue 1592] - Error (typo) in the docs
* [issue 1589] - Disconnecting a locality results in segfault using heartbeat
                 example
* [pr    1588] - Fix doc string for config option HPX_WITH_EXAMPLES
* [pr    1586] - Fixing 1493
* [pr    1585] - Additional Check for Inspect Tool to detect Endline Whitespace
* [pr    1583] - Adding a check for end line whitespace
* [pr    1582] - Attempt to fix assert firing after scheduling loop was exited
* [pr    1581] - Fixed adjacentfind_binary test
* [pr    1580] - Prevent some of the internal cmake lists from growing
                 indefinitely
* [pr    1579] - Removing type_size trait, replacing it with special archive
                 type
* [issue 1578] - Remove demangle_helper
* [pr    1577] - Get ptr problems
* [pr    1575] - Fixing tests for parallel rotate
* [pr    1574] - Cleaning up schedulers
* [pr    1573] - Fixing thread pool executor
* [pr    1572] - Fixing number of configured localities
* [pr    1571] - Reimplement decay
* [pr    1569] - Changed range for mach-o library lookup
* [pr    1568] - Mark decltype support as required
* [issue 1566] - CMAKE Configuration Test Failures for clang 3.5 on debian
* [pr    1565] - Dylib support
* [pr    1564] - Converted partitioners and some algorithms to use executors
* [pr    1563] - Fix several #includes for Boost.Preprocessor
* [pr    1562] - Adding configuration option disabling/enabling all message
                 handlers
* [pr    1561] - Removed all occurrences of boost::move replacing it with
                 std::move
* [issue 1560] - Leftover HPX_REGISTER_ACTION_DECLARATION_2
* [pr    1558] - Revisit async/apply SFINAE conditions
* [pr    1557] - Removing type_size trait, replacing it with special archive
                 type
* [pr    1556] - Executor algorithms
* [pr    1555] - Remove the necessity to specify archive flags on the receiving
                 end
* [pr    1554] - Removing obsolete Boost.Serialization macros
* [pr    1553] - Properly fix HPX_DEFINE_*_ACTION macros
* [pr    1552] - Fixed algorithms relying on copy_if implementation
* [pr    1551] - Pxfs - Modifying FindOrangeFS.cmake based on OrangeFS 2.9.X
* [issue 1550] - Passing plain identifier inside HPX_DEFINE_PLAIN_ACTION_1
* [pr    1549] - Fixing intel14/libstdc++4.4
* [pr    1548] - Moving raw_ptr to detail namespace
* [pr    1546] - Executor traits result types
* [pr    1545] - Integrate executors with dataflow
* [pr    1543] - Fix potential zero-copy for primarynamespace::bulk_service_async
                 et.al.
* [pr    1542] - Merging HPX0.9.10 into pxfs branch
* [pr    1541] - Removed stale cmake tests, unused since the great cmake
                 refactoring
* [pr    1540] - Fix idle-rate on platforms without TSC
* [pr    1539] - Reporting situation if zero-copy-serialization was performed
                 by a parcel generated from a plain apply/async
* [pr    1538] - Changed return type of bulk executors and added test
* [issue 1537] - Incorrect cpuid config tests
* [pr    1536] - Changed return type of bulk executors and added test
* [pr    1535] - Make sure promise::get_gid() can be called more than once
* [pr    1534] - Fixed async_callback with bound callback
* [pr    1533] - Updated the link in the documentation to a publically-
                 accessible URL
* [pr    1532] - Make sure sync primitives are not copyable nor movable
* [pr    1531] - Fix unwrapped issue with future ranges of void type
* [pr    1530] - Serialization complex
* [issue 1528] - Unwrapped issue with future<void>
* [issue 1527] - HPX does not build with Boost 1.58.0
* [pr    1526] - Added support for boost.multi_array serialization
* [pr    1525] - Properly handle deferred futures, fixes #1506
* [pr    1524] - Making sure invalid action argument types generate clear error
                 message
* [issue 1522] - Need serialization support for boost multi array
* [issue 1521] - Remote async and zero-copy serialization optimizations don't
                 play well together
* [pr    1520] - Fixing UB whil registering polymorphic classes for serialization
* [pr    1519] - Making detail::condition_variable safe to use
* [pr    1518] - Fix when_some bug missing indices in its result
* [issue 1517] - Typo may affect CMake build system tests
* [pr    1516] - Fixing Posix context
* [pr    1515] - Fixing Posix context
* [pr    1514] - Correct problems with loading dynamic components
* [pr    1513] - Fixing intel glibc4 4
* [issue 1508] - memory and papi counters do not work
* [pr    1505] - Adding #include - would not compile without this
* [issue 1502] - `boost::filesystem::exists` throws unexpected exception
* [pr    1504] - Making sure boost::filesystem::exists() does not throw
* [pr    1500] - Exit application on `--hpx:version`/`-v` and `--hpx:info`
* [pr    1498] - Extended task block
* [pr    1497] - Unique ptr serialization
* [pr    1496] - Unique ptr serialization (closed)
* [pr    1495] - Switching circleci build type to debug
* [issue 1494] - `--hpx:version`/`-v` does not exit after printing version
                 information
* [pr    1489] - Enable idle rate counter on demand
* [pr    1488] - Made sure `detail::condition_variable` can be safely destroyed
* [pr    1487] - Introduced default (main) template implementation for
                 `ignore_while_checking`
* [pr    1486] - Add HPX inspect tool
* [issue 1485] - `ignore_while_locked` doesn't support all Lockable types
* [pr    1484] - Docker image generation
* [pr    1483] - Move external endian library into HPX
* [pr    1482] - Actions with integer type ids
* [issue 1481] - Sync primitives safe destruction
* [issue 1480] - Move external/boost/endian into hpx/util
* [issue 1478] - Boost inspect violations
* [pr    1477] - Fixing problems with the Intel compiler using a GCC 4.4 std
                 library
* [pr    1476] - Adding `hpx::lcos::latch` and `hpx::lcos::local::latch`
* [pr    1473] - Fixing action move tests
* [pr    1470] - Removing `hpx::util::polymorphic_factory`
* [pr    1468] - Fixed container creation
* [issue 1467] - HPX application fail during finalization
* [issue 1475] - Build error with Boost 1.58.0
* [pr    1463] - Replacing `async_colocated(id, ...)` with `async(colocated(id), ...)`
* [pr    1462] - Consolidated task_region with N4411
* [pr    1461] - Consolidate inconsistent CMake option names
* [issue 1460] - Which malloc is actually used? or at least which one is HPX
                 built with
* [issue 1459] - Make cmake configure step fail explicitly if compiler version
                 is not supported
* [issue 1458] - Update `parallel::task_region` with N4411
* [pr    1456] - Consolidating `new_<>()`
* [issue 1455] - Replace `async_colocated(id, ...)` with `async(colocated(id), ...)`
* [pr    1454] - Removed harmful std::moves from return statements
* [pr    1453] - Use range-based for-loop instead of Boost.Foreach
* [pr    1452] - C++ feature tests
* [pr    1451] - When serializing, pass archive flags to traits::get_type_size
* [issue 1450] - traits:get_type_size needs archive flags to enable zero_copy
                 optimizations
* [issue 1449] - "couldn't create performance counter" - AGAS
* [issue 1448] - Replace distributing factories with `new_<T[]>(...)`
* [pr    1447] - Removing obsolete remote_object component
* [pr    1446] - Hpx serialization
* [pr    1445] - Replacing travis with circleci
* [pr    1443] - Always stripping HPX command line arguments before executing
                 start function
* [pr    1442] - Adding --hpx:bind=none to disable thread affinities
* [issue 1439] - Libraries get linked in multiple times, RPATH is not properly
                 set
* [pr    1438] - Removed superfluous typedefs
* [issue 1437] - `hpx::init()` should strip HPX-related flags from argv
* [issue 1436] - Add strong scaling option to htts
* [pr    1435] - Adding `async_cb`, `async_continue_cb`, and `async_colocated_cb`
* [pr    1434] - Added missing install rule, removed some dead CMake code
* [pr    1433] - Add GitExternal and SubProject cmake scripts from
                 eyescale/cmake repo
* [issue 1432] - Add command line flag to disable thread pinning
* [pr    1431] - Fix #1423
* [issue 1430] - Inconsistent CMake option names
* [issue 1429] - Configure setting `HPX_HAVE_PARCELPORT_MPI` is ignored
* [pr    1428] - Fixes #1419 (closed)
* [pr    1427] - Adding stencil_iterator and transform_iterator
* [pr    1426] - Fixes #1419
* [pr    1425] - During serialization memory allocation should honour allocator
                 chunk size
* [issue 1424] - chunk allocation during serialization does not use memory
                 pool/allocator chunk size
* [issue 1423] - Remove `HPX_STD_UNIQUE_PTR`
* [issue 1422] - hpx:threads=all allocates too many os threads
* [pr    1420] - added .travis.yml
* [pr    1416] - Adding travis builder
* [issue 1414] - Correct directory for dispatch_gcc46.hpp iteration
* [issue 1410] - Set operation algorithms
* [issue 1309] - `hpx::vector` partitions are not easily extendable by
                 applications

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[include whats_new_previous.qbk]

[endsect] [/ What's New]

[/Proofread by:]
[/Adrian Serio 3-13-12]

