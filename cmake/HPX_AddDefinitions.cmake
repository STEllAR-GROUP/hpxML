# Copyright (c) 2013 Hartmut Kaiser
# Copyright (c) 2014 Thomas Heller
# Copyright (c) 2016 John Biddiscombe
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# ---------------------------------------------------------------------
# Function to add variables to a list that will be later written out
# to file hpx/config/defines.hpp
# ---------------------------------------------------------------------
# on startup, this is unset, but we'll set it to an empty string anyway
set_property(GLOBAL PROPERTY HPX_CONFIG_DEFINITIONS "")

function(hpx_add_config_define definition)
 
  if(ARGN)
    set_property(GLOBAL APPEND PROPERTY HPX_CONFIG_DEFINITIONS "${definition} ${ARGN}")
  else()
    set_property(GLOBAL APPEND PROPERTY HPX_CONFIG_DEFINITIONS "${definition}")
  endif()

endfunction()

# ---------------------------------------------------------------------
# Function to add config defines to a list that depends on a namespace variable
# #defines that match the namespace can later be written out to a file  
# ---------------------------------------------------------------------
function(hpx_add_config_define_namespace)
  set(options)
  set(one_value_args DEFINE NAMESPACE)
  set(multi_value_args VALUE)
  cmake_parse_arguments(OPTION 
    "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})
 
  set(DEF_VAR HPX_CONFIG_DEFINITIONS_${OPTION_NAMESPACE})
       
  # to avoid extra trailing spaces (no value), use an if check
  if(OPTION_VALUE)       
    set_property(GLOBAL APPEND PROPERTY ${DEF_VAR} "${OPTION_DEFINE} ${OPTION_VALUE}")
  else()
    set_property(GLOBAL APPEND PROPERTY ${DEF_VAR} "${OPTION_DEFINE}")
  endif()    

endfunction()

# ---------------------------------------------------------------------
# Function to write variables out from a global var that was set using
# the config_define functions into a config file
# ---------------------------------------------------------------------
function(write_config_defines_file)
  set(options)
  set(one_value_args TEMPLATE NAMESPACE FILENAME)
  set(multi_value_args)
  cmake_parse_arguments(OPTION 
    "${options}" "${one_value_args}" "${multi_value_args}" ${ARGN})

  if (${OPTION_NAMESPACE} STREQUAL "default")
    get_property(DEFINITIONS_VAR GLOBAL PROPERTY 
      HPX_CONFIG_DEFINITIONS)
  else()
    get_property(DEFINITIONS_VAR GLOBAL PROPERTY 
      HPX_CONFIG_DEFINITIONS_${OPTION_NAMESPACE})
  endif()

  list(SORT DEFINITIONS_VAR)
  list(REMOVE_DUPLICATES DEFINITIONS_VAR)

  set(hpx_config_defines "\n")
  foreach(def ${DEFINITIONS_VAR})
    set(hpx_config_defines "${hpx_config_defines}#define ${def} ${${def}_define}\n")#"
  endforeach()

  # if the user has not specified a template, generate a proper header file
  if (NOT OPTION_TEMPLATE)
    string(TOUPPER ${OPTION_NAMESPACE} NAMESPACE_UPPER)
    set(PREAMBLE 
      "//  Copyright (c) Ste||ar Group\n"
      "//\n"
      "//  Distributed under the Boost Software License, Version 1.0. (See accompanying\n"
      "//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n"
      "\n"
      "// Do not edit this file! It has been generated by the cmake configuration step.\n"
      "\n"
      "#ifndef HPX_CONFIG_${NAMESPACE_UPPER}_HPP\n"      
      "#define HPX_CONFIG_${NAMESPACE_UPPER}_HPP\n"
    )      
    file(WRITE ${OPTION_FILENAME} 
        ${PREAMBLE}
        ${hpx_config_defines}
        "\n#endif\n"
    )    
  else()    
    configure_file("${OPTION_TEMPLATE}"
                   "${OPTION_FILENAME}"
                   @ONLY)
  endif()
endfunction()
