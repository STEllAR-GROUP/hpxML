[/==============================================================================
    Copyright (C) 2014 Thomas Heller

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[/ This file has been automatically generated using the CMake tool.            /]
[/ Do not edit manually.                                                       /]

[section:cmake_variables CMake Variables used to configure __hpx__]

In order to configure HPX, you can set a variety of options to allow cmake to generate
your specific makefiles/project files.

[section:configure Variables that influence how HPX is being built]

The options are split into these categories:

@HPX_CMAKE_OPTIONS@

[endsect] [/ Variables that influence how HPX is being built]

[section:cmake_additional_tools Additional Tools and Libraries used by HPX]

Here is a list of additional libraries and tools which are either optionally
supported by the build system or are optionally required for certain examples
or tests. These libraries and tools can be detected by the __hpx__ build
system.

Each of the tools or libraries listed here will be automatically detected if
they are installed in some standard location. If a tool or library is installed
in a different location you can specify its base directory by appending `_ROOT`
to the variable name as listed below. For instance, to configure a custom
directory for `BOOST`, specify `BOOST_ROOT=/custom/boost/root`.

[variablelist Additional Tools and Libraries used by HPX
    [[`BOOST_ROOT:PATH`]
     [Specifies where to look for the __boost__ installation to be used for
      compiling __hpx__. Set this if CMake is not able to locate a suitable
      version of __boost__. The directory specified here can be either the
      root of a installed Boost distribution or the directory where you
      unpacked and built __boost__ without installing it (with staged
      libraries).]
    ]
    [[`HWLOC_ROOT:PATH`]
     [Specifies where to look for the __hwloc__ library. While it is not
      necessary to compile __hpx__ with HWLOC, we strongly suggest you do so.
      HWLOC provides platform independent support for extracting information
      about the used hardware architecture (number of cores, number of NUMA
      domains, hyperthreading, etc.). __hpx__ utilizes this information if
      available.]
    ]
    [[`PAPI_ROOT:PATH`]
     [Specifies where to look for the __papi__ library. The PAPI library is
      necessary to compile a special component exposing PAPI hardware events and
      counters as __hpx__ performance counters. This is not available on
      the Windows platform.]
    ]
    [[`BOOSTWAVE_ROOT:PATH`]
     [Specifies where to look for a built __boost_wave__ binary. Set this if
      you want to recreate the preprocessed header files used by __hpx__.
      Normally this will not be necessary, unless you modified the sources
      those preprocessed headers depend on.]
    ]
    [[`AMPLIFIER_ROOT:PATH`]
     [Specifies where to look for one of the tools of the Intel Parallel
      Studio(tm) product, either Intel Amplifier(tm) or Intel Inspector(tm).
      This should be set if the CMake variable `HPX_USE_ITT_NOTIFY` is set
      to `ON`. Enabling ITT support in __hpx__ will integrate any application
      with the mentioned Intel tools, which customizes the generated
      information for your application and improves the generated
      diagnostics.]
    ]
    [[`SODIUM_ROOT:PATH`]
     [Specifies where to look for the __sodium__ library. The Sodium library
      is necessary to enable the security related functionality (see
      `HPX_HAVE_SECURITY`).]
    ]
]

[variablelist Additional Tools and Libraries Required by some of the Examples
    [[`HDF5_ROOT:PATH`]
     [Specifies where to look for the __hdf5__ include files and libraries.]
    ]
]

[endsect]

[endsect] [/ CMake Variables used to configure HPX]
