//  Copyright (c) 2005-2014 Hartmut Kaiser
//
//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#if !defined(HPX_STATIC_COMPONENT_DATA_HPP)
#define HPX_STATIC_COMPONENT_DATA_HPP

#include <hpx/config.hpp>
#include <hpx/util/plugin.hpp>
#include <hpx/util/plugin/export_plugin.hpp>

#include <boost/preprocessor/stringize.hpp>

///////////////////////////////////////////////////////////////////////////////
struct static_component_load_data_type
{
    char const* const name;     // component name
    void (*force_load)();       // function to force linking component
    hpx::plugin::get_plugins_list_type get_factory;
};

struct static_module_load_data_type
{
    char const* const name;         // module name
    void (*force_load)();           // function to force linking module
    unsigned long (*get_version)(); // function to force linking version API
};

#if defined(HPX_BUILD_STATIC)
///////////////////////////////////////////////////////////////////////////////
#define HPX_STATIC_DECLARE_COMPONENT(prefix, name)                            \
    extern "C" void HPX_PLUGIN_FORCE_LOAD_NAME(prefix, name)();               \
    extern "C" HPX_PLUGIN_EXPORT_API std::map<std::string, boost::any>&       \
        HPX_PLUGIN_API HPX_PLUGIN_LIST_NAME(prefix, name)()                   \
/**/

#define HPX_STATIC_DEFINE_COMPONENT(prefix, name)                             \
    {                                                                         \
        BOOST_PP_STRINGIZE(name),                                             \
        HPX_PLUGIN_FORCE_LOAD_NAME(prefix, name),                             \
        HPX_PLUGIN_LIST_NAME(prefix, name)                                    \
    }                                                                         \
/**/

///////////////////////////////////////////////////////////////////////////////
#define HPX_STATIC_DECLARE_MODULE(prefix, name)                               \
    extern "C" void HPX_PLUGIN_FORCE_LOAD_NAME(prefix, name)();               \
    namespace hpx { unsigned long get_ ## name ## _module_version(); }        \
/**/

#define HPX_STATIC_DEFINE_MODULE(prefix, name)                                \
    {                                                                         \
        BOOST_PP_STRINGIZE(name),                                             \
        HPX_PLUGIN_FORCE_LOAD_NAME(prefix, name),                             \
        &hpx::get_ ## name ## _module_version                                 \
    }                                                                         \
/**/

///////////////////////////////////////////////////////////////////////////////
// prototypes of functions used to force linking of components
@HPX_REPLACE@[[
    HPX_STATIC_DECLARE_COMPONENT(HPX_PLUGIN_COMPONENT_PREFIX, @COMPONENT_NAME@);
]]

// prototypes of functions used to force linking of modules
@HPX_REPLACE@[[
    HPX_STATIC_DECLARE_MODULE(HPX_PLUGIN_COMPONENT_PREFIX, @MODULE_NAME@);
]]

#endif

///////////////////////////////////////////////////////////////////////////////
// table of components to link statically
static_component_load_data_type static_component_load_data[] =
{
#if defined(HPX_BUILD_STATIC)
@HPX_REPLACE@[[
    HPX_STATIC_DEFINE_COMPONENT(HPX_PLUGIN_COMPONENT_PREFIX, @COMPONENT_NAME@),
]]
#endif
    { NULL, NULL }
};

// table of modules to link statically
static_module_load_data_type static_module_load_data[] =
{
#if defined(HPX_BUILD_STATIC)
@HPX_REPLACE@[[
    HPX_STATIC_DEFINE_MODULE(HPX_PLUGIN_COMPONENT_PREFIX, @MODULE_NAME@),
]]
#endif
    { NULL, NULL }
};

///////////////////////////////////////////////////////////////////////////////
// enable auto-linking on supported platforms
#if defined(HPX_BUILD_STATIC)
// auto-link modules
@HPX_REPLACE@[[
    #define HPX_AUTOLINK_LIB_NAME "@MODULE_NAME@"
    #include <hpx/config/autolink.hpp>
]]
#endif

#endif

