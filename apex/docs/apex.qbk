[/=============================================================================
    Copyright (C) 2014 University of Oregon
    Copyright (C) 2014 Louisiana State University

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:apex_api Tnhe APEX API]

[heading Initialization and Termination]

    namespace apex
    {
        void init(void);
        void init(int argc, char** argv);
        void finalize(void);
    }

[heading Version Control]

    namespace apex
    {
        double version(void);
    }

[heading Starting and Stopping APEX Operation]

    namespace apex
    {
        void start(std::string timer_name);
        void stop(std::string timer_name);
        void stop(void);

        void enable_tracking_power(void);
        void disable_tracking_power(void);

        void sample_value(std::string name, double value);
        void set_node_id(int id);
        void register_thread(std::string name);
        void track_power(void);
        void track_power_here(void);
        void set_interrupt_interval(int seconds);
    }

[heading Event Policies]

    namespace apex
    {
        struct context { <unspecified> };
        struct policy_handle { <unspecified> };

        enum event_type
        {
            event_startup,
            event_shutdown,
            event_new_node,
            event_new_thread,
            event_start_event,
            event_stop_event,
            event_sample_value,
            event_periodic
        };

        policy_handle register_policy(event_type when,
            std::function<bool(event_type when, context const&)> f);
    }

Registers an event policy for the given event. An event policy exposes an
action function which performs a control operation specific to the policy.
The policy action function is allowed not to perform any control action, in
which case it should return false.

The returned value identifies the registered policy and can be used to
unregister it.


    namespace apex
    {
        template <typename Rep, typename Period>
        policy_handle register_policy(
            boost::chrono::duration<Rep, Period> const& rel_time,
            std::function<bool(context const&)> f);
    }

Registers a periodic policy which will be called periodically based on the
given time duration. A periodic policy exposes an action function which
performs a control operation specific to the policy.
The policy action function is allowed not to perform any control action, in
which case it should return false.

The returned value identifies the registered policy and can be used to
unregister it.

    namespace apex
    {
        void unregister_policy(policy_handle cookie);
    }

Unregisters a given policy which is identified by the policy handle which was
returned from either `register_policy`.

[endsect]
