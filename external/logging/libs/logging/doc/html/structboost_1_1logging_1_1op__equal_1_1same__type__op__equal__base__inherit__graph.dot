digraph G
{
  edge [fontname="FreeSans.ttf",fontsize=10,labelfontname="FreeSans.ttf",labelfontsize=10];
  node [fontname="FreeSans.ttf",fontsize=10,shape=record];
  rankdir=LR;
  Node1 [label="boost::logging::op_equal::same_type_op_equal_base",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node2 [label="boost::logging::manipulator::base\< raw_param_type, param_type, ptr_type_ \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1base.html",tooltip="What to use as base class, for your manipulator classes."];
  Node2 -> Node3 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node3 [label="boost::logging::destination::base\< const arg_type, arg_type &, ptr \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1destination_1_1base.html",tooltip="What to use as base class, for your destination classes."];
  Node3 -> Node4 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node4 [label="boost::logging::manipulator::class_\< as_xml, op_e, boost::logging::destination::base\<  \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1class__.html"];
  Node2 -> Node5 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node5 [label="boost::logging::destination::base\<  \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1destination_1_1base.html"];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node6 [label="boost::logging::manipulator::base\< arg_type, arg_type &, ptr \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1base.html"];
  Node6 -> Node7 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node7 [label="boost::logging::formatter::base\< arg_type, ptr_type_ \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1formatter_1_1base.html",tooltip="What to use as base class, for your formatter classes."];
  Node6 -> Node8 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node8 [label="boost::logging::formatter::base\<  \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1formatter_1_1base.html"];
  Node8 -> Node9 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node9 [label="boost::logging::manipulator::class_\< secs_since_start, op_e, boost::logging::formatter::base\<  \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1class__.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node10 [label="boost::logging::manipulator::base\< const arg_type, arg_type &, ptr \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1base.html"];
  Node1 -> Node11 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node11 [label="boost::logging::op_equal::same_type_op_equal\< type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1op__equal_1_1same__type__op__equal.html",tooltip="Implements operator==, which compares two objects. If they have the same type, it..."];
  Node11 -> Node12 [dir=back,color="firebrick4",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node12 [label="boost::logging::manipulator::class_\< unsigned int \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1class__.html",tooltip="Use this when implementing your own formatter or destination class. Don&#39;t use..."];
  Node12 -> Node13 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node13 [label="boost::logging::destination::class_\< unsigned int, op_e, base_type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1destination_1_1class__.html",tooltip="Use this when implementing your own destination class."];
  Node12 -> Node14 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node14 [label="boost::logging::destination::class_\< as_xml, destination::implement_op_equal::has_context \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1destination_1_1class__.html"];
  Node12 -> Node15 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node15 [label="boost::logging::formatter::class_\< unsigned int, op_e, base_type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1formatter_1_1class__.html",tooltip="Use this when implementing your own formatter class."];
  Node12 -> Node16 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node16 [label="boost::logging::formatter::class_\< secs_since_start, formatter::implement_op_equal::no_context \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1formatter_1_1class__.html"];
  Node1 -> Node17 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node17 [label="boost::logging::op_equal::same_type_op_equal\< as_xml \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1op__equal_1_1same__type__op__equal.html"];
  Node17 -> Node4 [dir=back,color="firebrick4",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node1 -> Node18 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node18 [label="boost::logging::op_equal::same_type_op_equal\< boost::logging::manipulator::detail::generic_holder\< generic_type, manipulator_base \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1op__equal_1_1same__type__op__equal.html"];
  Node18 -> Node19 [dir=back,color="firebrick4",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node19 [label="boost::logging::manipulator::class_\< boost::logging::manipulator::detail::generic_holder\< generic_type, manipulator_base \>, implement_op_equal::has_context, manipulator_base \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1class__.html"];
  Node1 -> Node20 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node20 [label="boost::logging::op_equal::same_type_op_equal\< secs_since_start \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1op__equal_1_1same__type__op__equal.html"];
  Node20 -> Node9 [dir=back,color="firebrick4",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node1 -> Node21 [dir=back,color="midnightblue",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node21 [label="boost::logging::op_equal::same_type_op_equal\< unsigned int \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1op__equal_1_1same__type__op__equal.html"];
  Node21 -> Node22 [dir=back,color="firebrick4",fontsize=10,style="solid",fontname="FreeSans.ttf"];
  Node22 [label="boost::logging::manipulator::class_\< unsigned int, op_e, base_type \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structboost_1_1logging_1_1manipulator_1_1class__.html"];
}
